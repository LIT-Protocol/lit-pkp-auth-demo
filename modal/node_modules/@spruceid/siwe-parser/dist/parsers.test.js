"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const abnf_1 = require("./abnf");
const fs = __importStar(require("fs"));
const parsingPositive = JSON.parse(fs.readFileSync('../../test/parsing_positive.json', 'utf8'));
const parsingNegative = JSON.parse(fs.readFileSync('../../test/parsing_negative.json', 'utf8'));
//
describe("Successfully parses with ABNF Client", () => {
    test.concurrent.each(Object.entries(parsingPositive))("Parses message successfully: %s", (test_name, test) => {
        const parsedMessage = new abnf_1.ParsedMessage(test.message);
        for (const [field, value] of Object.entries(test.fields)) {
            if (value === null) {
                expect(parsedMessage[field]).toBeUndefined();
            }
            else if (typeof value === "object") {
                expect(parsedMessage[field]).toStrictEqual(value);
            }
            else {
                expect(parsedMessage[field]).toBe(value);
            }
        }
    });
});
describe("Successfully fails with ABNF Client", () => {
    test.concurrent.each(Object.entries(parsingNegative))("Fails to parse message: %s", (test_name, test) => {
        expect(() => new abnf_1.ParsedMessage(test)).toThrow();
    });
});
