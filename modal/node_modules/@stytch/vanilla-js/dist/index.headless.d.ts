import { IHeadlessCryptoWalletClient, IHeadlessMagicLinksClient, IHeadlessOTPsClient, IHeadlessPasswordClient, IHeadlessSessionClient, IHeadlessTOTPClient, IHeadlessUserClient, IHeadlessWebAuthnClient, StytchClientOptions, IHeadlessOAuthClient } from "@stytch/core/public";
import { PromptMomentNotification } from "google-one-tap";
type OneTapNotShownReason = ReturnType<PromptMomentNotification["getNotDisplayedReason"]> | ReturnType<PromptMomentNotification["getSkippedReason"]>;
type OneTapRenderResult = {
    success: true;
} | {
    success: false;
    reason: OneTapNotShownReason;
};
type GoogleOneTapOAuthOptions = {
    /**
     * The URL that Stytch redirects to after the OAuth flow is completed for a user that already exists.
     * This URL should be an endpoint in the backend server that verifies the request by querying Stytch's /oauth/authenticate endpoint and finishes the login.
     * The URL should be configured as a Login URL in the Stytch Dashboard's Redirect URL page.
     * If the field is not specified, the default in the Dashboard is used.
     */
    login_redirect_url?: string;
    /**
     * The URL that Stytch redirects to after the OAuth flow is completed for a user that does not yet exist.
     * This URL should be an endpoint in the backend server that verifies the request by querying Stytch's /oauth/authenticate endpoint and finishes the login.
     * The URL should be configured as a Sign Up URL in the Stytch Dashboard's Redirect URL page.
     * If the field is not specified, the default in the Dashboard is used.
     */
    signup_redirect_url?: string;
    /**
     * An optional callback function that runs when a user explicitly cancels out of the one tap flow.
     */
    onOneTapCancelled?: () => void;
};
interface IGoogleOneTapOAuthProvider {
    /**
     * Start an OAuth flow by showing the Google one tap prompt in the top right corner of the user's browser.
     * You can configure this to be started by a user action (i.e Button click) or on load/render.
     * @example
     * const showGoogleOneTap = useCallback(()=> {
     *   stytch.oauth.googleOneTap.start({
     *     login_redirect_url: 'https://example.com/oauth/callback',
     *     signup_redirect_url: 'https://example.com/oauth/callback',
     *   })
     * }, [stytch]);
     * return (
     *   <Button onClick={showGoogleOneTap}> Show Google one tap </Button>
     * );
     *
     * @param options - An {@link GoogleOneTapOAuthOptions} object
     *
     * @returns A {@link OneTapRenderResult} object. The result object includes if the one-tap prompt
     * was rendered, and a reason if it couldn't be rendered.
     *
     * @throws An Error if the one tap client cannot be created.
     */
    start(options?: GoogleOneTapOAuthOptions): Promise<OneTapRenderResult>;
}
interface IWebOAuthClient extends IHeadlessOAuthClient {
    googleOneTap: IGoogleOneTapOAuthProvider;
}
/**
 * A headless client used for invoking the Stytch API.
 * The Stytch Headless Client can be used as a drop-in solution for authentication and session management.
 * Full documentation can be found {@link https://stytch.com/docs/sdks/javascript-sdk online}.
 * @example
 * const stytch = new StytchHeadlessClient('public-token-<find yours in the stytch dashboard>');
 * stytch.magicLinks.email.loginOrCreate('sandbox@stytch.com', {
 *   login_magic_link_url: 'https://example.com/authenticate',
 *   login_expiration_minutes: 60,
 *   signup_magic_link_url: 'https://example.com/authenticate',
 *   signup_expiration_minutes: 60,
 * });
 */
declare class StytchHeadlessClient {
    private readonly _subscriptionService;
    private readonly _sessionManager;
    private readonly _networkClient;
    private readonly _dataLayer;
    // External API Clients
    user: IHeadlessUserClient;
    magicLinks: IHeadlessMagicLinksClient;
    session: IHeadlessSessionClient;
    otps: IHeadlessOTPsClient;
    oauth: IWebOAuthClient;
    cryptoWallets: IHeadlessCryptoWalletClient;
    totps: IHeadlessTOTPClient;
    webauthn: IHeadlessWebAuthnClient;
    passwords: IHeadlessPasswordClient;
    constructor(_PUBLIC_TOKEN: string, options?: StytchClientOptions);
}
export { StytchHeadlessClient };
export * from '@stytch/core/public';
