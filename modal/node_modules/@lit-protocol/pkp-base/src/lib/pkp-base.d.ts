import { LitNodeClient } from '@lit-protocol/lit-node-client';
import { AuthenticationProps, PKPBaseProp, AuthSig, PKPBaseDefaultParams, SigResponse, RPCUrls, AuthMethod, SessionSigsMap } from '@lit-protocol/types';
/**
 * A base class that can be shared between Ethers and Cosmos signers.
 */
export declare class PKPBase<T = PKPBaseDefaultParams> {
    rpcs?: RPCUrls;
    private _controllerAuthSig?;
    controllerAuthMethods?: AuthMethod[];
    controllerSessionSigs?: SessionSigsMap;
    authContext?: AuthenticationProps;
    uncompressedPubKey: string;
    uncompressedPubKeyBuffer: Uint8Array;
    compressedPubKey: string;
    compressedPubKeyBuffer: Uint8Array;
    litNodeClient: LitNodeClient;
    litActionCode?: string;
    litActionIPFS?: string;
    litActionJsParams: T;
    debug: boolean;
    useAction: boolean | undefined;
    private PREFIX;
    private orange;
    private reset;
    get litNodeClientReady(): boolean;
    /**
     * @deprecated - Use a different authentication method instead.
     */
    get controllerAuthSig(): AuthSig | undefined;
    /**
     * @deprecated - Use a different authentication method instead.
     */
    set controllerAuthSig(value: AuthSig | undefined);
    private constructor();
    /**
     * Creates a new instance of the PKPBase class with the provided properties.
     *
     * @param { PKPBaseProp } pkpBaseProp - The properties for the PKPBase instance.
     *
     * @returns { PKPBase } - A new instance of the PKPBase class.
     * */
    static createInstance(pkpBaseProp: PKPBaseProp): PKPBase;
    /**
     * Sets the uncompressed public key and its buffer representation.
     *
     * @param { PKPBaseProp } prop - The properties for the PKPBase instance.
     */
    private setUncompressedPubKeyAndBuffer;
    /**
     * Sets the compressed public key and its buffer representation.
     *
     * @param {PKPBaseProp} prop - The properties for the PKPBase instance.
     */
    private setCompressedPubKeyAndBuffer;
    /**
     * Sets the Lit action to be executed by the LitNode client.
     *
     * @param {PKPBaseProp} pkpBaseProp - An object containing the parameters for the Lit action.
     *
     * @returns {void} - If both `litActionCode` and `litActionIPFS` are present, throws an Error. Otherwise, does not return a value.
     */
    private setLitAction;
    /**
     * A function that sets the value of the litActionJsParams property to the given params object.
     * @template CustomType - A generic type that extends T, where T is the type of the litActionJsParams property.
     *
     * @param { CustomType } params - An object of type CustomType that contains the parameters to be set as litActionJsParams.
     *
     * @returns { void }
     */
    private setLitActionJsParams;
    /**
     * Initializes the PKPBase instance by connecting to the LIT node.
     */
    init(): Promise<void>;
    private validateAuthContext;
    private getSessionSigs;
    /**
     * Runs the specified Lit action with the given parameters.
     *
     * @param {Uint8Array} toSign - The data to be signed by the Lit action.
     * @param {string} sigName - The name of the signature to be returned by the Lit action.
     *
     * @returns {Promise<any>} - A Promise that resolves with the signature returned by the Lit action.
     *
     * @throws {Error} - Throws an error if `pkpPubKey` is not provided, if `controllerAuthSig` or `controllerSessionSigs` is not provided, if `controllerSessionSigs` is not an object, if `executeJsArgs` does not have either `code` or `ipfsId`, or if an error occurs during the execution of the Lit action.
     */
    runLitAction(toSign: Uint8Array, sigName: string): Promise<any>;
    /**
     * Sign the provided data with the PKP private key.
     *
     * @param {Uint8Array} toSign - The data to be signed.
     *
     * @returns {Promise<any>} - A Promise that resolves with the signature of the provided data.
     *
     * @throws {Error} - Throws an error if `pkpPubKey` is not provided, if `controllerAuthSig` or `controllerSessionSigs` is not provided, if `controllerSessionSigs` is not an object, or if an error occurs during the signing process.
     */
    runSign(toSign: Uint8Array): Promise<SigResponse>;
    /**
     * Ensures that the LitNode client is ready for use by waiting for initialization if necessary.
     * If the client is already ready, this function does nothing.
     *
     * @returns {Promise<void>} - A Promise that resolves when the LitNode client is ready for use.
     */
    ensureLitNodeClientReady(): Promise<void>;
    /**
     * Logs the provided arguments to the console, but only if debugging is enabled.
     *
     * @param {...any[]} args - The values to be logged to the console.
     *
     * @returns {void} - This function does not return a value.
     */
    log(...args: any[]): void;
}
