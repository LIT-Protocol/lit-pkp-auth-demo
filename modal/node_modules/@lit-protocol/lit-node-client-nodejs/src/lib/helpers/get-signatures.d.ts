import { SigResponse, SigShare } from '@lit-protocol/types';
export declare const getFlattenShare: (share: any) => SigShare;
/**
 * Retrieves and combines signature shares from multiple nodes to generate the final signatures.
 *
 * @template T - The type of the final signatures. For `executeJs` endpoint, it returns as `signature`, and for `pkpSign` endpoint, it returns as `sig`.
 * @param {any} params.networkPubKeySet - The public key set of the network.
 * @param {number} params.minNodeCount - The threshold number of nodes
 * @param {any[]} params.signedData - The array of signature shares from each node.
 * @param {string} [params.requestId=''] - The optional request ID for logging purposes.
 * @returns {T | { signature: SigResponse; sig: SigResponse }} - The final signatures or an object containing the final signatures.
 *
 * @example
 *
 * executeJs: getSignatures<{ signature: SigResponse }>
 * pkpSign: getSignatures<{ sig: SigResponse }>
 */
export declare const getSignatures: <T>(params: {
    networkPubKeySet: any;
    minNodeCount: number;
    signedData: any[];
    requestId: string;
}) => Promise<T | {
    signature: SigResponse;
    sig: SigResponse;
}>;
