"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processLitActionResponseStrategy = void 0;
const misc_1 = require("@lit-protocol/misc");
/**
 * Finds the most and least common object within an of objects array
 * @param responses any[]
 * @returns an object which contains both the least and most occuring item in the array
 */
const _findFrequency = (responses) => {
    const sorted = responses.sort((a, b) => responses.filter((v) => v === a).length -
        responses.filter((v) => v === b).length);
    return { min: sorted[0], max: sorted[sorted?.length - 1] };
};
const processLitActionResponseStrategy = (responses, strategy) => {
    const executionResponses = responses.map((nodeResp) => {
        return nodeResp.response;
    });
    const copiedExecutionResponses = executionResponses.map((r) => {
        return '' + r;
    });
    if (strategy.strategy === 'custom') {
        try {
            if (strategy.customFilter) {
                const customResponseFilterResult = strategy?.customFilter(executionResponses);
                return customResponseFilterResult;
            }
            else {
                (0, misc_1.logError)('Custom filter specified for response strategy but none found. using most common');
            }
        }
        catch (e) {
            (0, misc_1.logError)('Error while executing custom response filter, defaulting to most common', e.toString());
        }
    }
    let respFrequency = _findFrequency(copiedExecutionResponses);
    if (strategy?.strategy === 'leastCommon') {
        (0, misc_1.log)('strategy found to be most common, taking most common response from execution results');
        return respFrequency.min;
    }
    else if (strategy?.strategy === 'mostCommon') {
        (0, misc_1.log)('strategy found to be most common, taking most common response from execution results');
        return respFrequency.max;
    }
    else {
        (0, misc_1.log)('no strategy found, using least common response object from execution results');
        respFrequency.min;
    }
};
exports.processLitActionResponseStrategy = processLitActionResponseStrategy;
//# sourceMappingURL=process-lit-action-response-strategy.js.map