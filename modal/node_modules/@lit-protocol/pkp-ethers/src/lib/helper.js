"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionToSign = void 0;
exports.convertHexToUtf8 = convertHexToUtf8;
exports.isSignedTransaction = isSignedTransaction;
const ethers_1 = require("ethers");
/**
 * Convert a hexadecimal value to its UTF-8 string representation.
 * If the input value is not a valid hexadecimal string, it will return the original value.
 *
 * @param {any} value - The hexadecimal value to convert.
 * @returns {string} The converted UTF-8 string or the original value if it is not a valid hex string.
 */
function convertHexToUtf8(value) {
    try {
        if (ethers_1.ethers.utils.isHexString(value)) {
            return ethers_1.ethers.utils.toUtf8String(value);
        }
        return value;
    }
    catch (e) {
        return value;
    }
}
/**
 * Get a transaction object to sign by removing 'gas' and 'from' fields from the input transaction parameters.
 *
 * @param {any} txParams - The original transaction parameters.
 * @returns {any} The transaction object with 'gas' and 'from' fields removed.
 */
const getTransactionToSign = (txParams) => {
    const formattedTx = Object.assign({}, txParams);
    if (formattedTx.gas) {
        delete formattedTx.gas;
    }
    if (formattedTx.from) {
        delete formattedTx.from;
    }
    return formattedTx;
};
exports.getTransactionToSign = getTransactionToSign;
function isSignedTransaction(tx) {
    try {
        const parsedTx = ethers_1.ethers.utils.parseTransaction(tx);
        return !!parsedTx.v && !!parsedTx.r && !!parsedTx.s;
    }
    catch (err) {
        return false;
    }
}
//# sourceMappingURL=helper.js.map