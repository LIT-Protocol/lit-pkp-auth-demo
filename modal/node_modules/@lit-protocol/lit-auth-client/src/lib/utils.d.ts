import { AuthMethod, LoginUrlParams } from '@lit-protocol/types';
export declare const STATE_PARAM_KEY = "lit-state-param";
export declare const LIT_LOGIN_GATEWAY = "https://login.litgateway.com";
/**
 * Check if OAuth provider is supported
 *
 * @param provider {string} - Auth provider name
 *
 * @returns {boolean} - True if provider is supported
 */
export declare function isSocialLoginSupported(provider: string): boolean;
/**
 * Create login url using the parameters provided as arguments when initializing the client
 *
 * @param {string} provider - Social login provider to use
 * @param {string} redirectUri - Redirect uri to use
 *
 * @returns {Promise<string>} - Login url
 */
export declare function prepareLoginUrl(provider: string, redirectUri: string, baseUrl?: string): Promise<string>;
/**
 * Parse out login parameters from the query string
 *
 * @param {string} search - Query string
 *
 * @returns {LoginUrlParams} - Login url params
 */
export declare function parseLoginParams(search: string): LoginUrlParams;
/**
 * Check if current url is redirect uri to determine if app was redirected back from external login page
 *
 * @param {string} redirectUri - Redirect uri to check against
 *
 * @returns {boolean} - If current url is redirect uri
 */
export declare function isSignInRedirect(redirectUri: string): boolean;
/**
 * Get provider name from redirect uri if available
 *
 * @returns {string} - Provider name
 */
export declare function getProviderFromUrl(): string | null;
/**
 * Create OAuth 2.0 state param and store it in session storage
 *
 * @returns {Promise<string>} - State param
 */
export declare function setStateParam(): Promise<string>;
/**
 * Get OAuth 2.0 state param from session storage
 *
 * @returns {string} - State param
 */
export declare function getStateParam(): string | null;
/**
 * Remove OAuth 2.0 state param from session storage
 *
 * @returns {void}
 */
export declare function removeStateParam(): void;
/**
 * Encode a string with base64
 *
 * @param value {string} - String to encode
 *
 * @returns {string} - Encoded string
 */
export declare function encode(value: string): string;
/**
 * Decode a string with base64
 *
 * @param value {string} - String to decode
 *
 * @returns {string} - Decoded string
 */
export declare function decode(value: string): string;
/**
 * Get RP ID from origin for WebAuthn
 *
 * @param {string} origin - Origin to get RP ID from
 *
 * @returns {string} - RP ID
 */
export declare function getRPIdFromOrigin(origin: string): string;
export declare function parseAuthenticatorData(authDataBuffer: Buffer): Record<string, unknown>;
export declare function unparse(buf: any): string;
export declare function log(...args: any): void;
/**
 * Retrieves the authentication ID based on the provided authentication method.
 *
 * @param {AuthMethod} authMethod - The authentication method
 * @returns {Promise<string>} - The authentication ID
 */
export declare function getAuthIdByAuthMethod(authMethod: AuthMethod): Promise<string>;
