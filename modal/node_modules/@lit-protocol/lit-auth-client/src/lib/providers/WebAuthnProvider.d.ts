import { AuthMethod, BaseProviderOptions, MintRequestBody, WebAuthnProviderOptions } from '@lit-protocol/types';
import { PublicKeyCredentialCreationOptionsJSON } from '@simplewebauthn/typescript-types';
import { BaseProvider } from './BaseProvider';
import { RegistrationResponseJSON } from '@simplewebauthn/typescript-types';
export default class WebAuthnProvider extends BaseProvider {
    /**
     * Name of relying party. Defaults to "lit"
     */
    private rpName?;
    constructor(options: BaseProviderOptions & WebAuthnProviderOptions);
    /**
     * Generate registration options for the browser to pass to a supported authenticator
     *
     * @param {string} username - Username to register credential with
     *
     * @returns {Promise<PublicKeyCredentialCreationOptionsJSON>} - Options to pass to the authenticator
     */
    register(username?: string): Promise<PublicKeyCredentialCreationOptionsJSON>;
    /**
     * Mint PKP with verified registration data
     *
     * @param {PublicKeyCredentialCreationOptionsJSON} options - Registration options to pass to the authenticator
     * @param {MintRequestBody} [customArgs] - Extra data to overwrite default params
     *
     * @returns {Promise<string>} - Mint transaction hash
     */
    verifyAndMintPKPThroughRelayer(options: PublicKeyCredentialCreationOptionsJSON, customArgs?: MintRequestBody): Promise<string>;
    /**
     * @override
     * This method is not applicable for WebAuthnProvider and should not be used.
     * Use verifyAndMintPKPThroughRelayer instead to mint a PKP for a WebAuthn credential.
     *
     * @throws {Error} - Throws an error when called for WebAuthnProvider.
     */
    mintPKPThroughRelayer(): Promise<string>;
    /**
     * Authenticate with a WebAuthn credential and return the relevant authentication data
     *
     * @returns {Promise<AuthMethod>} - Auth method object containing WebAuthn authentication data
     */
    authenticate(): Promise<AuthMethod>;
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<string>} - Auth method id
     */
    getAuthMethodId(authMethod: AuthMethod): Promise<string>;
    static authMethodId(authMethod: AuthMethod, rpName?: string): Promise<string>;
    /**
     * Parse the WebAuthn registration response to get the WebAuthn credential public key
     *
     * @param {RegistrationResponseJSON} attResp - WebAuthn registration response
     *
     * @returns {string} - WebAuthn credential public key in hex format
     */
    static getPublicKeyFromRegistration(attResp: RegistrationResponseJSON): string;
}
