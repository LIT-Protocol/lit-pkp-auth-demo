import { AUTH_METHOD_TYPE_VALUES } from '@lit-protocol/constants';
import { LitNodeClient } from '@lit-protocol/lit-node-client';
import { AuthMethod, AuthenticateOptions, BaseProviderOptions, BaseProviderSessionSigsParams, ClaimKeyResponse, ClaimProcessor, ClaimRequest, IRelay, IRelayPKP, IRelayRequestData, MintRequestBody, SessionSigs } from '@lit-protocol/types';
export declare abstract class BaseProvider {
    /**
     * Relay server to subsidize minting of PKPs
     */
    relay: IRelay;
    /**
     * Client to connect to Lit nodes
     */
    litNodeClient: LitNodeClient;
    constructor(options: BaseProviderOptions);
    /**
     * Authenticate the user based on the provider-specific implementation and return the relevant authentication data
     *
     * @template T - Type representing the specific options for the authenticate method
     * @param {T} [options] - Optional parameters that vary based on the provider
     * @param {(currentUrl: string, redirectUri: string) => boolean} [urlCheckCallback] - Optional callback to handle authentication data or errors
     * @returns {Promise<AuthMethod>} - Auth method object that contains authentication data
     */
    abstract authenticate<T extends AuthenticateOptions>(options?: T, urlCheckCallback?: (currentUrl: string, redirectUri: string) => boolean): Promise<AuthMethod>;
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method
     *
     * @param {AuthMethod} authMethod - Auth method object
     * @param {any} [options] - Optional parameters that vary based on the provider
     *
     * @returns {Promise<string>} - Auth method id
     */
    abstract getAuthMethodId(authMethod: AuthMethod, options?: any): Promise<string>;
    /**
     * Mint a new PKP for the given auth method through the relay server
     *
     * @param {AuthMethod} authMethod - Auth method object
     * @param {MintRequestBody} [customArgs] - Extra data to overwrite default params
     *
     * @returns {Promise<string>} - Mint transaction hash
     */
    mintPKPThroughRelayer(authMethod: AuthMethod, customArgs?: MintRequestBody): Promise<string>;
    /**
     * @deprecated - Use {@link fetchPKPs} instead
     * Fetch PKPs associated with given auth method from relay server
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<IRelayPKP[]>} - Array of PKPs
     */
    fetchPKPsThroughRelayer(authMethod: AuthMethod): Promise<IRelayPKP[]>;
    /**
     * Fetch PKPs associated with given auth method type and id from pkp contract
     *
     * @param {AUTH_METHOD_TYPE} authMethodType - Auth method type
     * @param {string} authMethodId - Auth method id
     *
     * @returns {Promise<IRelayPKP[]>} - Array of PKPs
     */
    getPKPsForAuthMethod({ authMethodType, authMethodId, }: {
        authMethodType: AUTH_METHOD_TYPE_VALUES;
        authMethodId: string;
    }): Promise<IRelayPKP[]>;
    /**
     * Fetch PKPs associated with given auth method from pkp contract
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<IRelayPKP[]>} - Array of PKPs
     */
    fetchPKPs(authMethod: AuthMethod): Promise<IRelayPKP[]>;
    /**
     * Generate session sigs for given auth method and PKP
     *
     * @param {BaseProviderSessionSigsParams} params
     * @param {string} params.pkpPublicKey - Public key of PKP to auth with
     * @param {AuthMethod} params.authMethod - Auth method verifying ownership of PKP
     * @param {GetSessionSigsProps} params.sessionSigsParams - Params for getSessionSigs function
     * @param {LitNodeClient} [params.litNodeClient] - Lit Node Client to use. If not provided, will use an existing Lit Node Client or create a new one
     *
     * @returns {Promise<SessionSigs>} - Session sigs
     */
    getSessionSigs(params: BaseProviderSessionSigsParams): Promise<SessionSigs>;
    /**
     * Authenticates an auth Method for claiming a Programmable Key Pair (PKP).
     * Uses the underyling {@link litNodeClient} instance to authenticate a given auth method
     * @param claimRequest
     * @returns {Promise<ClaimKeyResponse>} - Response from the network for the claim
     */
    claimKeyId(claimRequest: ClaimRequest<ClaimProcessor>): Promise<ClaimKeyResponse>;
    /**
     * Calculates a public key for a given `key identifier` which is an `Auth Method Identifier`
     * the Auth Method Identifier is a hash of a user identifier and app idendtifer.
     * These identifiers are specific to each auth method and will derive the public key protion of a pkp which will be persited
     * when a key is claimed.
     * | Auth Method | User ID | App ID |
     * |:------------|:-------|:-------|
     * | Google OAuth | token `sub` | token `aud` |
     * | Discord OAuth | user id | client app identifier |
     * | Stytch OTP |token `sub` | token `aud`|
     * @param userId
     * @param appId
     * @returns
     */
    computePublicKeyFromAuthMethod: (authMethod: AuthMethod) => Promise<string>;
    /**
     * Generate request data for minting and fetching PKPs via relay server
     *
     * @param {AuthMethod} authMethod - Auth method obejct
     *
     * @returns {Promise<IRelayRequestData>} - Relay request data
     */
    prepareRelayRequestData(authMethod: AuthMethod): Promise<IRelayRequestData>;
    /**
     * Generate request body for minting PKP using auth methods via relay server
     *
     * @param {IRelayRequestData} data - Data for minting PKP
     * @param {number} data.authMethodType - Type of auth method
     * @param {string} data.authMethodId - ID of auth method
     * @param {string} [data.authMethodPubKey] - Public key associated with the auth method (used only in WebAuthn)
     * @param {MintRequestBody} [customArgs] - Extra data to overwrite default params
     *
     * @returns {string} - Relay request body for minting PKP
     */
    protected prepareMintBody(data: IRelayRequestData, customArgs: MintRequestBody): string;
    /**
     * Generate request body to fetch PKPs using auth method info via relay server
     *
     * @param {IRelayRequestData} data - Data for fetching PKP
     * @param {string} data.authMethodType - Type of auth method
     * @param {string} data.authMethodId - ID of auth method
     * @param {string} [data.authMethodPubKey] - Public key associated with the auth method (used only in WebAuthn)
     *
     * @returns {string} - Relay request body to fetch PKPs
     */
    protected prepareFetchBody(data: IRelayRequestData): string;
}
