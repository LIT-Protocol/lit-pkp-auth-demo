import { AuthMethod, AuthenticateOptions, BaseProviderOptions, OAuthProviderOptions } from '@lit-protocol/types';
import { BaseProvider } from './BaseProvider';
export default class GoogleProvider extends BaseProvider {
    /**
     * The redirect URI that Lit's login server should send the user back to
     */
    redirectUri: string;
    constructor(options: BaseProviderOptions & OAuthProviderOptions);
    /**
     * Redirect user to the Lit's Google login page
     *
     * @param {Function} [callback] - Optional callback to handle login URL
     * @returns {Promise<void>} - Redirects user to Lit login page
     */
    signIn(callback?: (url: string) => void): Promise<void>;
    /**
     * Validate the URL parameters returned from Lit's login server and return the authentication data
     *
     * @returns {Promise<AuthMethod>} - Auth method object that contains OAuth token
     */
    authenticate<T extends AuthenticateOptions>(_?: T, urlCheckCallback?: (currentUrl: string, redirectUri: string) => boolean): Promise<AuthMethod>;
    /**
     * Sign in using popup window
     *
     * @param baseURL
     */
    signInUsingPopup(baseURL: string): Promise<AuthMethod>;
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<string>} - Auth method id
     */
    getAuthMethodId(authMethod: AuthMethod): Promise<string>;
    static authMethodId(authMethod: AuthMethod): Promise<string>;
}
