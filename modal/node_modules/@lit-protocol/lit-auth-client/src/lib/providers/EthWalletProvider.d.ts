import { ethers } from 'ethers';
import { LitNodeClient } from '@lit-protocol/lit-node-client';
import { AuthMethod, BaseProviderOptions, EthWalletProviderOptions, EthWalletAuthenticateOptions } from '@lit-protocol/types';
import { BaseProvider } from './BaseProvider';
export default class EthWalletProvider extends BaseProvider {
    /**
     * The domain from which the signing request is made
     */
    domain: string;
    /**
     * The origin from which the signing request is made
     */
    origin: string;
    constructor(options: EthWalletProviderOptions & BaseProviderOptions);
    private static getDomainAndOrigin;
    /**
     * Generate a wallet signature to use as an auth method
     *
     * @param {EthWalletAuthenticateOptions} options
     * @param {string} [options.address] - Address to sign with
     * @param {string} [options.chain] - Name of chain to use for signature
     * @param {number} [options.expiration] - When the auth signature expires
     *
     * @returns {Promise<AuthMethod>} - Auth method object containing the auth signature
     */
    authenticate(options?: EthWalletAuthenticateOptions): Promise<AuthMethod>;
    /**
     * Generate a wallet signature to use as an auth method
     *
     * @param {EthWalletAuthenticateOptions} options
     * @param {object} options.signer - Signer object
     * @param {object} options.litNodeClient - LitNodeClient instance
     * @param {string} [options.address] - Address to sign with
     * @param {string} [options.chain] - Name of chain to use for signature
     * @param {number} [options.expiration] - When the auth signature expires
     * @param {string} [options.domain] - Domain from which the signing request is made
     * @param {string} [options.origin] - Origin from which the signing request is made
     * @returns {Promise<AuthMethod>} - Auth method object containing the auth signature
     * @static
     * @memberof EthWalletProvider
     *
     * @example
     * ```typescript
     *   const authMethod = await EthWalletProvider.authenticate({
     *      signer: wallet,
     *      litNodeClient: client,
     *   });
     * ```
     */
    static authenticate({ signer, address, chain, litNodeClient, expiration, domain, origin, }: {
        signer: ethers.Signer | ethers.Wallet | EthWalletAuthenticateOptions;
        litNodeClient: LitNodeClient;
        address?: string;
        chain?: string;
        expiration?: string;
        domain?: string;
        origin?: string;
    }): Promise<AuthMethod>;
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<string>} - Auth method id
     */
    getAuthMethodId(authMethod: AuthMethod): Promise<string>;
    static authMethodId(authMethod: AuthMethod): Promise<string>;
}
