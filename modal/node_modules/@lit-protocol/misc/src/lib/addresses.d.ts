import { TokenInfo } from '@lit-protocol/types';
/**
 * Converts a public key between compressed and uncompressed formats.
 *
 * @param publicKey - Public key as a Buffer (33 bytes compressed or 65 bytes uncompressed)
 * @param compressed - Boolean flag indicating whether the output should be compressed
 * @returns Converted public key as a Buffer
 */
export declare function publicKeyConvert(publicKey: Buffer, compressed?: boolean): Buffer;
type DerivedAddressesParams = {
    publicKey: string;
    pkpTokenId?: never;
    pkpContractAddress?: never;
    defaultRPCUrl?: never;
    options?: never;
} | {
    publicKey?: never;
    pkpTokenId: string;
    pkpContractAddress: string;
    defaultRPCUrl: string;
    options?: {
        cacheContractCall?: boolean;
    };
};
/**
 * Derives multiple blockchain addresses (Ethereum, Bitcoin, and Cosmos) from a given uncompressed eth public key
 * or PKP token ID. If a PKP token ID is provided, it retrieves the public key from the PKP contract.
 *
 * @param params - The parameters for deriving addresses.
 * @param params.publicKey - The Ethereum public key as a hex string (optional). If not provided, pkpTokenId must be provided.
 * @param params.pkpTokenId - The PKP token ID (optional). If not provided, publicKey must be provided.
 * @param params.pkpContractAddress - The PKP contract address (optional). If not provided, a default address is used.
 * @param params.defaultRPCUrl - The default RPC URL for connecting to the Ethereum network.
 * @param params.options - Additional options (optional).
 * @param params.options.cacheContractCall - Whether to cache the contract call result in local storage (default: false).
 *
 * @returns A Promise that resolves to an object containing token information:
 *   @property {string} tokenId - The PKP token ID.
 *   @property {string} publicKey - The Ethereum public key as a hex string.
 *   @property {Buffer} publicKeyBuffer - The buffer representation of the public key.
 *   @property {string} ethAddress - The derived Ethereum address.
 *   @property {string} btcAddress - The derived Bitcoin address.
 *   @property {string} cosmosAddress - The derived Cosmos address.
 *   @property {boolean} isNewPKP - Whether a new PKP was created.
 *
 * @throws {InvalidArgumentException} If the defaultRPCUrl is not provided.
 * @throws {ParamsMissingError} If neither publicKey nor pkpTokenId is provided.
 * @throws {MultiError} If any of the derived addresses (btcAddress, ethAddress, cosmosAddress) are undefined.
 */
export declare const derivedAddresses: ({ publicKey, pkpTokenId, pkpContractAddress, defaultRPCUrl, options, }: DerivedAddressesParams) => Promise<TokenInfo | any>;
export {};
