/**
 * Param Validators is an abstraction of validating params of a function, each validator
 * returns a boolean value indicating whether the validation is passed or not.
 */
import { IEither } from '@lit-protocol/constants';
import { AccessControlConditions, EvmContractConditions, SessionSigsOrAuthSig, SolRpcConditions, UnifiedAccessControlConditions } from '@lit-protocol/types';
export declare const safeParams: ({ functionName, params, }: {
    functionName: string;
    params: any[] | any;
}) => IEither<void>;
export declare const paramsValidators: Record<string, (params: any) => ParamsValidator[]>;
export type ParamsValidatorsType = typeof paramsValidators;
interface ParamsValidator {
    validate: () => IEither<void>;
}
export interface AuthMaterialValidatorProps extends SessionSigsOrAuthSig {
    chain?: string;
}
export interface AccessControlConditionsValidatorProps {
    accessControlConditions?: AccessControlConditions;
    evmContractConditions?: EvmContractConditions;
    solRpcConditions?: SolRpcConditions;
    unifiedAccessControlConditions?: UnifiedAccessControlConditions;
}
export {};
