// Generated by dts-bundle-generator v8.0.1

import { CID } from 'multiformats/cid';
import { SiweMessage } from 'siwe';

/**
 * PlainJSON type definition.
 *
 * @typedef PlainJSON
 * @type {boolean|number|string|Object.<string, PlainJSON>|Array.<PlainJSON>}
 */
export type PlainJSON = boolean | number | string | {
	[key: string]: PlainJSON;
} | Array<PlainJSON>;
/**
 * Attenuation object type definition.
 *
 * @typedef AttObj
 * @type {Object.<string, Object.<string, Array.<PlainJSON>>>}
 */
export type AttObj = {
	[key: string]: {
		[key: string]: Array<PlainJSON>;
	};
};
/**
 * Check if the input string is a valid string Regex.
 *
 * @param {string} str - The input string.
 * @returns {boolean} - Returns true if the input string is valid, otherwise false.
 */
export declare const validString: (str: string) => boolean;
/**
 * Check if the input string is a valid ability string Regex.
 *
 * @param {string} str - The input string.
 * @returns {boolean} - Returns true if the input string is valid, otherwise false.
 */
export declare const validAbString: (str: string) => boolean;
/**
 * Encode recap details (an attenuation object and a list of CIDs) into a base64 representation to be append the the Recap URI.
 *
 * @param {AttObj} att - The attenuation object.
 * @param {Array.<CID>} prf - An array of proof CIDs.
 * @returns {string} - Returns the base64url encoded component of a ReCap URI.
 */
export declare const encodeRecap: (att: AttObj, prf: Array<CID>) => string;
/**
 * Decode the base64 component of a ReCap URI into recap details (an attenuation object and a list of CIDs).
 *
 * @param {string} recap - The base64url encoded component ReCap URI.
 * @returns {Object} - An object containing a decoded att property as an attenuation object, and a decoded prf property as an array of CID objects.
 * @throws {Error} - Throws an error if the ReCap URI is invalid.
 */
export declare const decodeRecap: (recap: string) => {
	att: AttObj;
	prf: Array<CID>;
};
/**
 * Check if the input attenuation object is valid.
 *
 * @param {AttObj} att - The input attenuation object.
 * @returns {boolean} - Returns true if the input attenuation object is valid, otherwise false.
 * @throws {Error} - Throws an error if the attenuation object contains invalid entries.
 */
export declare const checkAtt: (att: AttObj) => att is AttObj;
/**
 * Check if the input object is sorted.
 *
 * @param {PlainJSON} obj - The input object.
 * @returns {boolean} - Returns true if the input object is sorted, otherwise false.
 */
export declare const isSorted: (obj: PlainJSON) => boolean;
/**
 * Recap class handles the creation, merging, and decoding of ReCap objects
 */
export declare class Recap {
	#private;
	/**
	 * Constructs a Recap instance
	 *
	 * @param att - The input attenuation object (default is an empty object {})
	 * @param prf - The input proof array (default is an empty array [])
	 */
	constructor(att?: AttObj, prf?: Array<CID> | Array<string>);
	/**
	 * Gets the proofs array of the Recap object
	 *
	 * @returns An Array of CID objects
	 */
	get proofs(): Array<CID>;
	/**
	* Gets the attenuation object of the Recap object
	*
	* @returns An attenuation object (AttObj)
	*/
	get attenuations(): AttObj;
	/**
	 * Calculates the statement field of a SIWE recap-transformed-statement
	 *
	 * @returns A string representing the statement constructed from the Recap object
	 */
	get statement(): string;
	/**
	 * Adds a new proof to the proofs collection of the Recap object
	 *
	 * @param cid - A CID (Content Identifier) object or its string representation
	 */
	addProof(cid: string | CID): void;
	/**
	 * Adds a new attenuation to the attenuations object of the Recap object
	 *
	 * @param resource - The resource URI
	 * @param namespace - The ability namespace (default is *)
	 * @param name - The ability name (default is *)
	 * @param restriction - A JSON object containing restrictions or requirements for the action (default is {})
	 */
	addAttenuation(resource: string, namespace?: string, name?: string, restriction?: {
		[key: string]: PlainJSON;
	}): void;
	/**
	 * Merges another Recap object with the current Recap object
	 *
	 * @param other - The other Recap object to be merged
	 */
	merge(other: Recap): void;
	/**
	 * Decodes a Recap URI into a Recap object
	 *
	 * @param recap - The input Recap URI string
	 * @returns A Recap object decoded from the input Recap URI
	 * @throws Will throw an error if the input string is not a valid Recap URI
	 */
	static decode_urn(recap: string): Recap;
	/**
	 * Extracts the Recap object from a SiweMessage instance
	 *
	 * @param siwe - A SiweMessage instance
	 * @returns A Recap object extracted from the input SiweMessage
	 * @throws Will throw an error if the SiweMessage doesn't have any resources
	 */
	static extract(siwe: SiweMessage): Recap;
	/**
	 * Extracts and verifies a Recap object from a SiweMessage instance
	 *
	 * @param siwe - A SiweMessage instance
	 * @returns A verified Recap object extracted from the input SiweMessage
	 * @throws Will throw an error if the SiweMessage has an invalid statement
	 */
	static extract_and_verify(siwe: SiweMessage): Recap;
	/**
	 * Adds a Recap object to a SiweMessage
	 *
	 * @param siwe - The input SiweMessage instance to be modified
	 * @returns A modified SiweMessage instance with the Recap object added
	 */
	add_to_siwe_message(siwe: SiweMessage): SiweMessage;
	/**
	 * Encodes a Recap object into a Recap URI
	 *
	 * @returns A Recap URI string
	 */
	encode(): string;
}

export {};
