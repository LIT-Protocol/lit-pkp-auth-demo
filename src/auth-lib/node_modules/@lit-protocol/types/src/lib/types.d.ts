import { AuthMethodType } from './enums';
import * as ethers from 'ethers';
import { LPACC_EVM_ATOM, LPACC_EVM_CONTRACT, LPACC_SOL, LPACC_EVM_BASIC } from '@lit-protocol/accs-schemas';
import { AuthMethod, LitRelayConfig, SignInWithOTPParams, Signature, StytchOtpProviderOptions, WebAuthnProviderOptions } from './interfaces';
import { AccsOperatorParams, EthWalletProviderOptions, JsonEncryptionRetrieveRequest, JsonExecutionRequest, JsonSignChainDataRequest, JsonSigningRetrieveRequest, OAuthProviderOptions, BaseAuthenticateOptions } from './interfaces';
export declare type ConditionType = 'solRpc' | 'evmBasic' | 'evmContract' | 'cosmos';
export declare type AccsDefaultParams = LPACC_EVM_BASIC;
export declare type AccsSOLV2Params = LPACC_SOL;
export declare type AccsEVMParams = LPACC_EVM_CONTRACT;
export declare type AccsCOSMOSParams = LPACC_EVM_ATOM;
export declare type AccsParams = AccsDefaultParams | AccsEVMParams | AccsSOLV2Params | AccsCOSMOSParams;
export declare type ConditionItem = AccsParams | AccsOperatorParams;
export declare type AccessControlConditions = (AccsDefaultParams | AccsOperatorParams | AccessControlConditions)[];
export declare type EvmContractConditions = (AccsEVMParams | AccsOperatorParams | EvmContractConditions)[];
export declare type SolRpcConditions = (AccsSOLV2Params | AccsOperatorParams | SolRpcConditions)[];
export declare type UnifiedAccessControlConditions = (AccsParams | AccsOperatorParams | UnifiedAccessControlConditions)[];
export declare type JsonRequest = JsonExecutionRequest | JsonSignChainDataRequest;
export declare type SupportedJsonRequests = JsonSigningRetrieveRequest | JsonEncryptionRetrieveRequest;
export declare type Chain = string;
/**
 *
 * The default required properties of all chains
 *
 * @typedef { Object } LITChainRequiredProps
 */
export declare type LITChainRequiredProps = {
    name: string;
    symbol: string;
    decimals: number;
    rpcUrls: Array<string>;
    blockExplorerUrls: Array<string>;
    vmType: string;
};
/**
 * @typedef { Object } LITEVMChain
 * @property { string } contractAddress - The address of the token contract for the optional predeployed ERC1155 contract.  Only present on EVM chains.
 * @property { string } chainId - The chain ID of the chain that this token contract is deployed on.  Used for EVM chains.
 * @property { string } name - The human readable name of the chain
 */
export declare type LITEVMChain = LITChainRequiredProps & {
    contractAddress: string | null;
    chainId: number;
    type: string | null;
};
/**
 * @typedef { Object } LITSVMChain
 */
export declare type LITSVMChain = LITChainRequiredProps;
/**
 * @typedef { Object } LITCosmosChain
 * @property {string} chainId - The chain ID of the chain that this token contract is deployed on.  Used for Cosmos chains.
 */
export declare type LITCosmosChain = LITChainRequiredProps & {
    chainId: string;
};
/**
 * @typedef {Object} LITChain
 * @property {string} vmType - Either EVM for an Ethereum compatible chain or SVM for a Solana compatible chain
 * @property {string} name - The human readable name of the chain
 */
export declare type LITChain<T> = {
    [chainName: string]: T;
};
export declare type LIT_NETWORKS_KEYS = 'cayenne' | 'localhost' | 'custom' | 'habanero' | 'manzano';
export declare type SymmetricKey = Uint8Array | string | CryptoKey | BufferSource;
export declare type EncryptedSymmetricKey = string | Uint8Array | any;
export declare type AcceptedFileType = File | Blob;
/**
 * ========== Lit Auth Client ==========
 */
export declare type IRelayAuthStatus = 'InProgress' | 'Succeeded' | 'Failed';
export declare type ProviderOptions = OAuthProviderOptions | EthWalletProviderOptions | SignInWithOTPParams | StytchOtpProviderOptions | WebAuthnProviderOptions;
export declare type AuthenticateOptions = BaseAuthenticateOptions;
/**
 * Type for expressing claim results being processed by a relay server
 */
export declare type RelayClaimProcessor = 'relay';
/**
 * Type for expressing claim results being processed by a local contract client
 * the `contract-sdk` is the intended use of this type
 */
export declare type ClientClaimProcessor = 'client';
/**
 * Type aggregate for Claim proccessor types
 */
export declare type ClaimProcessor = RelayClaimProcessor | ClientClaimProcessor;
/**
 * Callback function for processing claim requests.
 *
 * This function can be used in two scenarios:
 * 1. When the claim is processed by a relay server.
 * 2. When the claim is processed by a contract client.
 *
 * For contract clients, you can use the `contract-sdk` or implement your own client.
 * Ensure that your client has the correct ABI and contract addresses for successful processing.
 */
export declare type MintCallback<T = ClaimProcessor> = (response: ClaimResult<T>, network: string) => Promise<string>;
/**
 * Model for requesting a PKP to be claimed based on an {@link AuthMethod} identifier
 * the {@link MintCallback} may be defined for custom processing of the {@link ClaimResult}
 * which requires registering on chain, by default chain registering will be done by an external relay.
 * @property {AuthMethod} authMethod to derive the key id from for claiming
 * @property {MintCallback} mintCallback optional callback for custom on chain registration behavior
 */
export declare type ClaimRequest<T = ClaimProcessor> = {
    authMethod: AuthMethod;
    mintCallback?: MintCallback<T>;
} & (T extends 'relay' ? LitRelayConfig : {
    signer: ethers.Signer;
});
/**
 * Result from network claim proccessing, used in {@link MintCallback}
 */
export declare type ClaimResult<T = ClaimProcessor> = {
    signatures: Signature[];
    derivedKeyId: string;
    authMethodType: AuthMethodType;
    pubkey: string;
} & (T extends 'relay' ? LitRelayConfig : {
    signer: ethers.Signer;
});
export declare type LitContract = {
    address?: string;
    abi?: any;
    name?: string;
};
/**
 * Defines a set of contract metadata for bootstrapping
 * network context and interfacing with contracts on Chroncile blockchain
 *
 */
export declare type LitContractContext = {
    [index: string]: string | any;
    Allowlist: LitContract;
    LITToken: LitContract;
    Multisender: LitContract;
    PKPHelper: LitContract;
    PKPNFT: LitContract;
    PKPNFTMetadata: LitContract;
    PKPPermissions: LitContract;
    PubkeyRouter: LitContract;
    RateLimitNFT: LitContract;
    Staking: LitContract;
    StakingBalances: LitContract;
};
/**
 * Type for a contract resolver instance which will be used
 * In place of LitContractContext for loading addresses of lit contracts
 * an instance of LitContractContext can still be provided. which will be used for abi data.
 *
 */
export declare type LitContractResolverContext = {
    [index: string]: string | LitContractContext | ethers.providers.JsonRpcProvider | undefined | number;
    resolverAddress: string;
    abi: any;
    environment: number;
    contractContext?: LitContractContext;
    provider?: ethers.providers.JsonRpcProvider;
};
