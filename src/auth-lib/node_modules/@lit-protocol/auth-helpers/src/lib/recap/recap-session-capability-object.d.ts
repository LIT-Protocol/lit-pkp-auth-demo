import { SiweMessage } from 'siwe';
import { AttenuationsObject, CID as CIDString, ILitResource, ISessionCapabilityObject, LitAbility, PlainJSON } from '../models';
import { AuthSig } from '../models';
export declare class RecapSessionCapabilityObject implements ISessionCapabilityObject {
    #private;
    constructor(att?: AttenuationsObject, prf?: Array<CIDString> | Array<string>);
    /**
     * Adds a Rate Limit Authorization Signature (AuthSig) as an proof to the Recap object.
     * This method serializes the AuthSig object into a JSON string and adds it to the proof
     * of the Recap object. The AuthSig typically contains authentication details like signature,
     * method of derivation, the signed message, and the address of the signer. This proof is
     * used to verify that the user has the necessary authorization, such as a Rate Limit Increase NFT.
     *
     * @param authSig The AuthSig object containing the rate limit authorization details.
     */
    addRateLimitAuthSig(authSig: AuthSig): Promise<void>;
    static decode(encoded: string): RecapSessionCapabilityObject;
    static extract(siwe: SiweMessage): RecapSessionCapabilityObject;
    get attenuations(): AttenuationsObject;
    get proofs(): Array<CIDString>;
    get statement(): string;
    addProof(proof: string): void;
    addAttenuation(resource: string, namespace?: string, name?: string, restriction?: {
        [key: string]: PlainJSON;
    }): void;
    addToSiweMessage(siwe: SiweMessage): SiweMessage;
    encodeAsSiweResource(): string;
    /** LIT specific methods */
    addCapabilityForResource(litResource: ILitResource, ability: LitAbility, data?: any): void;
    verifyCapabilitiesForResource(litResource: ILitResource, ability: LitAbility): boolean;
    addAllCapabilitiesForResource(litResource: ILitResource): void;
}
