import { ILitResource, LitAbility, LitResourcePrefix } from './models';
declare abstract class LitResourceBase {
    abstract resourcePrefix: LitResourcePrefix;
    readonly resource: string;
    constructor(resource: string);
    getResourceKey(): string;
    toString(): string;
}
export declare class LitAccessControlConditionResource extends LitResourceBase implements ILitResource {
    readonly resourcePrefix = LitResourcePrefix.AccessControlCondition;
    /**
     * Creates a new LitAccessControlConditionResource.
     * @param resource The identifier for the resource. This should be the
     * hashed key value of the access control condition.
     */
    constructor(resource: string);
    isValidLitAbility(litAbility: LitAbility): boolean;
}
export declare class LitPKPResource extends LitResourceBase implements ILitResource {
    readonly resourcePrefix = LitResourcePrefix.PKP;
    /**
     * Creates a new LitPKPResource.
     * @param resource The identifier for the resource. This should be the
     * PKP token ID.
     */
    constructor(resource: string);
    isValidLitAbility(litAbility: LitAbility): boolean;
}
export declare class LitRLIResource extends LitResourceBase implements ILitResource {
    readonly resourcePrefix = LitResourcePrefix.RLI;
    /**
     * Creates a new LitRLIResource.
     * @param resource The identifier for the resource. This should be the
     * RLI token ID.
     */
    constructor(resource: string);
    isValidLitAbility(litAbility: LitAbility): boolean;
}
export declare class LitActionResource extends LitResourceBase implements ILitResource {
    readonly resourcePrefix = LitResourcePrefix.LitAction;
    /**
     * Creates a new LitActionResource.
     * @param resource The identifier for the resource. This should be the
     * Lit Action IPFS CID.
     */
    constructor(resource: string);
    isValidLitAbility(litAbility: LitAbility): boolean;
}
export declare function parseLitResource(resourceKey: string): ILitResource;
export {};
