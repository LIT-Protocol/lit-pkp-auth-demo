import { LITChain, LITCosmosChain, LITEVMChain, LITSVMChain } from '@lit-protocol/types';
/**
 * Lit Protocol Network Public Key
 */
export declare const NETWORK_PUB_KEY: string;
export declare const LIT_AUTH_SIG_CHAIN_KEYS: Array<string>;
export declare const AUTH_SIGNATURE_BODY = "I am creating an account to use Lit Protocol at {{timestamp}}";
/**
 * EVM Chains supported by the LIT protocol.  Each chain includes an optional pre-deployed token contract that you may use for minting LITs.  These are ERC1155 contracts that let you mint any quantity of a given token.  Use the chain name as a key in this object.
 * @constant
 * @type { LITEVMChain }
 * @default
 */
export declare const LIT_CHAINS: LITChain<LITEVMChain>;
export declare const LIT_EVM_CHAINS: LITChain<LITEVMChain>;
/**
 * Solana Chains supported by the LIT protocol.  Use the chain name as a key in this object.
 * @constant
 * @type { LITSVMChain }
 * @default
 */
export declare const LIT_SVM_CHAINS: LITChain<LITSVMChain>;
/**
 * Cosmos Chains supported by the LIT protocol.  Use the chain name as a key in this object.
 * @constant
 * @type { LITCosmosChain }
 * @default
 */
export declare const LIT_COSMOS_CHAINS: LITChain<LITCosmosChain>;
/**
 * All Chains supported by the LIT protocol.  Use the chain name as a key in this object.
 * @type { LITChain<LITEVMChain | LITSVMChain | LITCosmosChain> }
 */
export declare const ALL_LIT_CHAINS: LITChain<LITEVMChain | LITSVMChain | LITCosmosChain>;
/**
 * Local storage key constants
 */
export declare const LOCAL_STORAGE_KEYS: {
    AUTH_COSMOS_SIGNATURE: string;
    AUTH_SIGNATURE: string;
    AUTH_SOL_SIGNATURE: string;
    WEB3_PROVIDER: string;
    KEY_PAIR: string;
    SESSION_KEY: string;
    WALLET_SIGNATURE: string;
};
/**
 * Symmetric key algorithm parameters
 */
export declare const SYMM_KEY_ALGO_PARAMS: {
    name: string;
    length: number;
};
/**
 *
 * ALL LIT NETWORKS
 *
 */
export declare const LIT_NETWORKS: {
    cayenne: string[];
    localhost: string[];
    custom: never[];
    internalDev: string[];
    manzano: never[];
    habanero: never[];
};
export declare const LIT_SESSION_KEY_URI = "lit:session:";
export declare const AUTH_METHOD_TYPE_IDS: {
    WEBAUTHN: number;
    DISCORD: number;
    GOOGLE: number;
    GOOGLE_JWT: number;
};
export declare const PKP_CLIENT_SUPPORTED_CHAINS: string[];
export declare const TELEM_API_URL = "https://lit-general-worker.getlit.dev";
export declare const SIWE_DELEGATION_URI = "lit:capability:delegation";
export declare const RELAY_URL_CAYENNE = "https://relayer-server-staging-cayenne.getlit.dev";
export declare const RELAY_URL_HABANERO = "https://habanero-relayer.getlit.dev";
export declare const RELAY_URL_MANZANO = "https://manzano-relayer.getlit.dev";
export declare const LIT_ACTION_IPFS_HASH = "QmUjX8MW6StQ7NKNdaS6g4RMkvN5hcgtKmEi8Mca6oX4t3";
