export declare function base64ToUint8Array(str: any): Uint8Array;
/**
 * @private
 *Initialize function for the wasm library
 */
export declare function initialize(): void;
/**
 * @private
 *Encrypts the data to the public key and identity. All inputs are hex encoded strings.
 * @param {string} public_key
 * @param {string} message
 * @param {string} identity
 * @returns {string}
 */
export declare function encrypt(public_key: any, message: any, identity: any): string;
/**
 * @private
 *Verifies the decryption shares are valid and decrypts the data.
 * @param {string} public_key
 * @param {string} identity
 * @param {string} ciphertext
 * @param {any} shares
 * @returns {string}
 */
export declare function verify_and_decrypt_with_signature_shares(public_key: any, identity: any, ciphertext: any, shares: any): string;
/**
 * @private
 *Decrypts the data with signature shares.
 * @param {string} ciphertext
 * @param {any} shares
 * @returns {string}
 */
export declare function decrypt_with_signature_shares(ciphertext: any, shares: any): string;
/**
 * @private
 *Combines the signature shares into a single signature.
 * @param {any} shares
 * @returns {string}
 */
export declare function combine_signature_shares(shares: any): string;
/**
 * @private
 *Verifies the signature.
 * @param {string} public_key
 * @param {string} message
 * @param {string} signature
 */
export declare function verify_signature(public_key: any, message: any, signature: any): void;
declare function initSync(module: any): any;
declare function __wbg_init(input: any): Promise<any>;
export { initSync };
export default __wbg_init;
export declare function initWasmBlsSdk(): Promise<any>;
