import { BaseProvider } from './BaseProvider';
import { BaseAuthenticateOptions, AuthMethod, BaseProviderOptions, StytchOtpProviderOptions } from '@lit-protocol/types';
import { FactorParser } from './StytchAuthFactors';
export default class StytchAuthFactorOtpProvider<T extends FactorParser> extends BaseProvider {
    private _params;
    private _factor;
    private static _provider;
    constructor(params: BaseProviderOptions, config: StytchOtpProviderOptions, factor: T);
    /**
     * Validates claims within a stytch authenticated JSON Web Token
     * Will parse out the given `authentication factor` and use the transport
     * for the otp code as the `user identifier` for the given auth method.
     * @param options authentication option containing the authenticated token
     * @returns {AuthMethod} Authentication Method for auth method type OTP
     *
     */
    authenticate<T extends BaseAuthenticateOptions>(options?: T | undefined): Promise<AuthMethod>;
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<string>} - Auth method id
     */
    getAuthMethodId(authMethod: AuthMethod): Promise<string>;
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method.
     * Will parse out the given `authentication factor` and use the transport
     * for the otp code as the `user identifier` for the given auth method.
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<string>} - Auth method id
     */
    static authMethodId(authMethod: AuthMethod): Promise<string>;
    private static _resolveAuthFactor;
    /**
     *
     * @param jwt token to parse
     * @returns {string}- userId contained within the token message
     */
    private static _parseJWT;
}
