"use strict";
var _DiscordProvider_instances, _DiscordProvider_fetchDiscordUser;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const constants_1 = require("@lit-protocol/constants");
const BaseProvider_1 = require("./BaseProvider");
const utils_1 = require("../utils");
const ethers_1 = require("ethers");
class DiscordProvider extends BaseProvider_1.BaseProvider {
    constructor(options) {
        super(options);
        _DiscordProvider_instances.add(this);
        this.redirectUri = options.redirectUri || window.location.origin;
        this.clientId = options.clientId || '1052874239658692668';
    }
    /**
     * Redirect user to the Lit's Discord login page
     *
     * @returns {Promise<void>} - Redirects user to Lit login page
     */
    async signIn() {
        // Get login url
        const loginUrl = await (0, utils_1.prepareLoginUrl)('discord', this.redirectUri);
        // Redirect to login url
        window.location.assign(loginUrl);
    }
    /**
     * Validate the URL parameters returned from Lit's login server and return the authentication data
     *
     * @returns {Promise<AuthMethod>} - Auth method object that contains OAuth token
     */
    async authenticate() {
        // Check if current url matches redirect uri
        if (!window.location.href.startsWith(this.redirectUri)) {
            throw new Error(`Current url "${window.location.href}" does not match provided redirect uri "${this.redirectUri}"`);
        }
        // Check url for params
        const { provider, accessToken, state, error } = (0, utils_1.parseLoginParams)(window.location.search);
        // Check if there's an error
        if (error) {
            throw new Error(error);
        }
        // Check if provider is Discord
        if (!provider || provider !== 'discord') {
            throw new Error(`OAuth provider "${provider}" passed in redirect callback URL does not match "discord"`);
        }
        // Check if state param matches
        if (!state || (0, utils_1.decode)(decodeURIComponent(state)) !== (0, utils_1.getStateParam)()) {
            throw new Error(`Invalid state parameter "${state}" passed in redirect callback URL`);
        }
        // Clear params from url
        window.history.replaceState(null, window.document.title, window.location.pathname);
        // Check if access token is present in url
        if (!accessToken) {
            throw new Error(`Missing access token in redirect callback URL for Discord OAuth"`);
        }
        const authMethod = {
            authMethodType: constants_1.AuthMethodType.Discord,
            accessToken: accessToken,
        };
        return authMethod;
    }
    /**
     * Sign in using popup window
     *
     * @param baseURL
     */
    async signInUsingPopup(baseURL) {
        const width = 500;
        const height = 600;
        const left = window.screen.width / 2 - width / 2;
        const top = window.screen.height / 2 - height / 2;
        const url = await (0, utils_1.prepareLoginUrl)('discord', this.redirectUri, baseURL);
        const popup = window.open(`${url}&caller=${window.location.origin}`, 'popup', `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, copyhistory=no, width=${width}, height=${height}, top=${top}, left=${left}`);
        if (!popup) {
            throw new Error('Failed to open popup window');
        }
        return new Promise((resolve, reject) => {
            // window does not have a closed event, so we need to poll using a timer
            const interval = setInterval(() => {
                if (popup.closed) {
                    clearInterval(interval);
                    reject(new Error('User closed popup window'));
                }
            }, 1000);
            window.addEventListener('message', (event) => {
                if (event.origin !== (baseURL || utils_1.LIT_LOGIN_GATEWAY)) {
                    return;
                }
                const { provider, token, error } = event.data;
                if (error) {
                    clearInterval(interval);
                    reject(new Error(error));
                }
                if (provider === 'discord' && token) {
                    clearInterval(interval);
                    popup.close();
                    resolve({
                        authMethodType: constants_1.AuthMethodType.Discord,
                        accessToken: token,
                    });
                }
            });
        });
    }
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<string>} - Auth method id
     */
    async getAuthMethodId(authMethod) {
        const userId = await tslib_1.__classPrivateFieldGet(this, _DiscordProvider_instances, "m", _DiscordProvider_fetchDiscordUser).call(this, authMethod.accessToken);
        const authMethodId = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(`${userId}:${this.clientId}`));
        return authMethodId;
    }
    static async authMethodId(authMethod, clientId) {
        const _clientId = clientId || '1052874239658692668';
        // -- get user id from access token
        let userId;
        const meResponse = await fetch('https://discord.com/api/users/@me', {
            method: 'GET',
            headers: {
                authorization: `Bearer ${authMethod.accessToken}`,
            },
        });
        if (meResponse.ok) {
            const user = await meResponse.json();
            userId = user.id;
        }
        else {
            throw new Error('Unable to verify Discord account');
        }
        // -- get auth method id
        const authMethodId = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(`${userId}:${_clientId}`));
        return authMethodId;
    }
}
exports.default = DiscordProvider;
_DiscordProvider_instances = new WeakSet(), _DiscordProvider_fetchDiscordUser = 
/**
 * Fetch Discord user ID
 *
 * @param {string} accessToken - Discord access token
 *
 * @returns {Promise<string>} - Discord user ID
 */
async function _DiscordProvider_fetchDiscordUser(accessToken) {
    const meResponse = await fetch('https://discord.com/api/users/@me', {
        method: 'GET',
        headers: {
            authorization: `Bearer ${accessToken}`,
        },
    });
    if (meResponse.ok) {
        const user = await meResponse.json();
        return user.id;
    }
    else {
        throw new Error('Unable to verify Discord account');
    }
};
//# sourceMappingURL=DiscordProvider.js.map