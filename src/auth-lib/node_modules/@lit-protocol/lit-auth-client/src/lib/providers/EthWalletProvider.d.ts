import { AuthMethod, BaseProviderOptions, EthWalletProviderOptions, EthWalletAuthenticateOptions } from '@lit-protocol/types';
import { BaseProvider } from './BaseProvider';
export default class EthWalletProvider extends BaseProvider {
    /**
     * The domain from which the signing request is made
     */
    domain: string;
    /**
     * The origin from which the signing request is made
     */
    origin: string;
    constructor(options: BaseProviderOptions & EthWalletProviderOptions);
    /**
     * Generate a wallet signature to use as an auth method
     *
     * @param {EthWalletAuthenticateOptions} options
     * @param {string} [options.address] - Address to sign with
     * @param {function} [options.signMessage] - Function to sign message with
     * @param {string} [options.chain] - Name of chain to use for signature
     * @param {number} [options.expiration] - When the auth signature expires
     *
     * @returns {Promise<AuthMethod>} - Auth method object containing the auth signature
     */
    authenticate(options?: EthWalletAuthenticateOptions): Promise<AuthMethod>;
    /**
     * Get auth method id that can be used to look up and interact with
     * PKPs associated with the given auth method
     *
     * @param {AuthMethod} authMethod - Auth method object
     *
     * @returns {Promise<string>} - Auth method id
     */
    getAuthMethodId(authMethod: AuthMethod): Promise<string>;
    static authMethodId(authMethod: AuthMethod): Promise<string>;
}
