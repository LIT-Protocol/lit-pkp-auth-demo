import { IEither } from '@lit-protocol/constants';
/**
 *
 * Get the local storage item by key
 *
 * @param { string } key
 */
export declare const getStorageItem: (key: string) => IEither<string>;
/**
 *
 * Set the local storage item by key
 *
 * @param { string } key is the key to set
 * @param { string } value is the value to set
 */
export declare const setStorageItem: (key: string, value: string) => IEither<string>;
/**
 *
 * Remove the local storage item by key
 *
 * @param { string } key is the key to remove
 * @returns { IEither } Either the key or an error
 */
export declare const removeStorageItem: (key: string) => IEither<string>;
/**
 * Convert a Blob to a base64urlpad string.  Note: This function returns a promise.
 *
 * @param { Blob | File } blob The Blob or File to turn into a base64 string
 * @returns { Promise<string> } A promise that resolves to the base64 string
 */
export declare const blobToBase64String: (blob: Blob | File) => Promise<string>;
/**
 *
 * Convert a base64urlpad string to a Blob.
 * Note: This function DOES NOT return a promise
 *
 * @param { string } base64String The base64 string that to turn into a Blob
 * @returns { Blob }  A blob that contains the decoded base64 data
 */
export declare const base64StringToBlob: (base64String: string) => Blob;
/**
 *
 * Convert a file to a data URL, which could then be embedded in a LIT.
 * A data URL is a string representation of a file.
 *
 * @param { File } file The file to turn into a data url
 * @returns { string } The data URL.  This is a string representation that can be used anywhere the original file would be used.
 */
export declare const fileToDataUrl: (file: File) => Promise<string | ArrayBuffer | null>;
/**
 *
 * // TEST: downloadFile
 * Download a file in memory to the user's computer
 *
 * @param { Object } params
 * @property { string } filename The name of the file
 * @property { Uint8Array } data The actual file itself as a Uint8Array
 * @property { string } mimetype The mime type of the file
 *
 * @returns { void } The data URL.  This is a string representation that can be used anywhere the original file would be used.
 *
 */
export declare const downloadFile: ({ fileName, data, mimeType, }: {
    fileName: string;
    data: Uint8Array;
    mimeType: string;
}) => void;
/**
 *
 * // TEST: injectViewerIFrame
 * Inject an iFrame into the current page that will display a LIT.
 * This function safely sandboxes the content in the iFrame so that the LIT cannot see cookies or localStorage of the parent website.
 *
 * @param { Object } params
 * @property { string } destinationId The DOM ID of the element to inject the iFrame into
 * @property { string } title The title of the content being displayed
 * @property { string } fileUrl The URL of the content that will be shown in the iFrame
 * @property { string } className An optional DOM class name to add to the iFrame for styling
 *
 * @returns { void }
 */
export declare const injectViewerIFrame: ({ destinationId, title, fileUrl, className, }: {
    destinationId: string;
    title: string;
    fileUrl: string;
    className: string;
}) => void;
