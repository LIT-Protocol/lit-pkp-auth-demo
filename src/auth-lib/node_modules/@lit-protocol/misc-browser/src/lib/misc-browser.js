"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectViewerIFrame = exports.downloadFile = exports.fileToDataUrl = exports.base64StringToBlob = exports.blobToBase64String = exports.removeStorageItem = exports.setStorageItem = exports.getStorageItem = void 0;
const constants_1 = require("@lit-protocol/constants");
const uint8arrays_1 = require("@lit-protocol/uint8arrays");
/**
 *
 * Get the local storage item by key
 *
 * @param { string } key
 */
const getStorageItem = (key) => {
    let item;
    try {
        item = localStorage.getItem(key);
    }
    catch (e) {
        // swallowing
    }
    if (!item) {
        return (0, constants_1.ELeft)({
            message: `Failed to get ${key} from local storage`,
            errorKind: constants_1.LIT_ERROR.LOCAL_STORAGE_ITEM_NOT_FOUND_EXCEPTION.kind,
            errorCode: constants_1.LIT_ERROR.LOCAL_STORAGE_ITEM_NOT_FOUND_EXCEPTION.name,
        });
    }
    return (0, constants_1.ERight)(item);
};
exports.getStorageItem = getStorageItem;
/**
 *
 * Set the local storage item by key
 *
 * @param { string } key is the key to set
 * @param { string } value is the value to set
 */
const setStorageItem = (key, value) => {
    try {
        localStorage.setItem(key, value);
        return (0, constants_1.ERight)(value);
    }
    catch (e) {
        return (0, constants_1.ELeft)({
            message: `Failed to set ${key} in local storage`,
            error: constants_1.LIT_ERROR.LOCAL_STORAGE_ITEM_NOT_SET_EXCEPTION,
        });
    }
};
exports.setStorageItem = setStorageItem;
/**
 *
 * Remove the local storage item by key
 *
 * @param { string } key is the key to remove
 * @returns { IEither } Either the key or an error
 */
const removeStorageItem = (key) => {
    try {
        localStorage.removeItem(key);
        return (0, constants_1.ERight)(key);
    }
    catch (e) {
        return (0, constants_1.ELeft)({
            message: `Failed to remove ${key} from local storage`,
            error: constants_1.LIT_ERROR.LOCAL_STORAGE_ITEM_NOT_REMOVED_EXCEPTION,
        });
    }
};
exports.removeStorageItem = removeStorageItem;
/**
 * Convert a Blob to a base64urlpad string.  Note: This function returns a promise.
 *
 * @param { Blob | File } blob The Blob or File to turn into a base64 string
 * @returns { Promise<string> } A promise that resolves to the base64 string
 */
const blobToBase64String = async (blob) => {
    const arrayBuffer = await blob.arrayBuffer();
    const uint8array = new Uint8Array(arrayBuffer);
    return (0, uint8arrays_1.uint8arrayToString)(uint8array, 'base64urlpad');
};
exports.blobToBase64String = blobToBase64String;
/**
 *
 * Convert a base64urlpad string to a Blob.
 * Note: This function DOES NOT return a promise
 *
 * @param { string } base64String The base64 string that to turn into a Blob
 * @returns { Blob }  A blob that contains the decoded base64 data
 */
const base64StringToBlob = (base64String) => {
    return new Blob([(0, uint8arrays_1.uint8arrayFromString)(base64String, 'base64urlpad')]);
};
exports.base64StringToBlob = base64StringToBlob;
/**
 *
 * Convert a file to a data URL, which could then be embedded in a LIT.
 * A data URL is a string representation of a file.
 *
 * @param { File } file The file to turn into a data url
 * @returns { string } The data URL.  This is a string representation that can be used anywhere the original file would be used.
 */
const fileToDataUrl = (file) => {
    return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            resolve(reader.result);
        };
        reader.readAsDataURL(file);
    });
};
exports.fileToDataUrl = fileToDataUrl;
/**
 *
 * // TEST: downloadFile
 * Download a file in memory to the user's computer
 *
 * @param { Object } params
 * @property { string } filename The name of the file
 * @property { Uint8Array } data The actual file itself as a Uint8Array
 * @property { string } mimetype The mime type of the file
 *
 * @returns { void } The data URL.  This is a string representation that can be used anywhere the original file would be used.
 *
 */
const downloadFile = ({ fileName, data, mimeType, }) => {
    const element = document.createElement('a');
    element.setAttribute('href', 'data:' + mimeType + ';base64,' + (0, uint8arrays_1.uint8arrayToString)(data, 'base64'));
    element.setAttribute('download', fileName);
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
};
exports.downloadFile = downloadFile;
/**
 *
 * // TEST: injectViewerIFrame
 * Inject an iFrame into the current page that will display a LIT.
 * This function safely sandboxes the content in the iFrame so that the LIT cannot see cookies or localStorage of the parent website.
 *
 * @param { Object } params
 * @property { string } destinationId The DOM ID of the element to inject the iFrame into
 * @property { string } title The title of the content being displayed
 * @property { string } fileUrl The URL of the content that will be shown in the iFrame
 * @property { string } className An optional DOM class name to add to the iFrame for styling
 *
 * @returns { void }
 */
const injectViewerIFrame = ({ destinationId, title, fileUrl, className, }) => {
    if (fileUrl.includes('data:')) {
        // data urls are not safe, refuse to do this
        throw new Error('You can not inject an iFrame with a data url.  Try a regular https URL.');
    }
    const url = new URL(fileUrl);
    if (url.host.toLowerCase() === window.location.host.toLowerCase()) {
        throw new Error('You cannot host a LIT on the same domain as the parent webpage.  This is because iFrames with the same origin have access to localstorage and cookies in the parent webpage which is unsafe');
    }
    const iframe = Object.assign(document.createElement('iframe'), {
        src: fileUrl,
        title: title,
        sandbox: 'allow-forms allow-scripts allow-popups  allow-modals allow-popups-to-escape-sandbox allow-same-origin',
        loading: 'lazy',
        allow: 'accelerometer; ambient-light-sensor; autoplay; battery; camera; display-capture; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr; screen-wake-lock; web-share; xr-spatial-tracking',
    });
    if (className) {
        iframe.className = className;
    }
    document.getElementById(destinationId)?.appendChild(iframe);
};
exports.injectViewerIFrame = injectViewerIFrame;
//# sourceMappingURL=misc-browser.js.map