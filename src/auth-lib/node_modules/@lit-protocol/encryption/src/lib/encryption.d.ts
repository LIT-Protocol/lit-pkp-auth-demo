import { DecryptFromIpfsProps, DecryptRequest, DecryptZipFileWithMetadata, DecryptZipFileWithMetadataProps, EncryptFileAndZipWithMetadataProps, EncryptFileRequest, EncryptRequestBase, EncryptResponse, EncryptStringRequest, EncryptToIpfsProps, EncryptZipRequest, IJWT, ILitNodeClient, SigningAccessControlConditionJWTPayload, VerifyJWTProps } from '@lit-protocol/types';
import * as JSZip from 'jszip/dist/jszip.js';
/**
 *
 * Encrypt a string or file using the LIT network public key and upload all the metadata required to decrypt i.e. accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions & chain to IPFS using the ipfs-client-http SDK & returns the IPFS CID.
 *
 * @param { EncryptToIpfsProps } - The params required to encrypt & upload to IPFS
 *
 * @returns { Promise<string> } - IPFS CID
 *
 */
export declare const encryptToIpfs: (params: EncryptToIpfsProps) => Promise<string>;
/**
 *
 * Decrypt & return the string or file (in Uint8Array format) using its metadata stored on IPFS with the given ipfsCid.
 *
 * @param { DecryptFromIpfsProps } - The params required to decrypt from IPFS
 *
 * @returns { Promise<string | Uint8Array> } - The decrypted string or file (in Uint8Array format)
 *
 */
export declare const decryptFromIpfs: (params: DecryptFromIpfsProps) => Promise<string | Uint8Array>;
/**
 *
 * Encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { EncryptStringRequest } params - The params required to encrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted string and the hash of the string
 */
export declare const encryptString: (params: EncryptStringRequest, litNodeClient: ILitNodeClient) => Promise<EncryptResponse>;
/**
 *
 * Decrypt ciphertext into a string that was encrypted with the encryptString function.
 *
 * @param { DecryptRequest } params - The params required to decrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client

 * @returns { Promise<string> } - The decrypted string
 */
export declare const decryptToString: (params: DecryptRequest, litNodeClient: ILitNodeClient) => Promise<string>;
/**
 *
 * Zip and encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { EncryptStringRequest } params - The params required to encrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted string and the hash of the string
 */
export declare const zipAndEncryptString: (params: EncryptStringRequest, litNodeClient: ILitNodeClient) => Promise<EncryptResponse>;
/**
 *
 * Zip and encrypt multiple files.
 *
 * @param { Array<File> } files - The files to encrypt
 * @param { EncryptRequestBase } paramsBase - The params required to encrypt a file
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted file and the hash of the file
 
*/
export declare const zipAndEncryptFiles: (files: Array<File>, paramsBase: EncryptRequestBase, litNodeClient: ILitNodeClient) => Promise<EncryptResponse>;
/**
 *
 * Decrypt and unzip a zip that was created using encryptZip, zipAndEncryptString, or zipAndEncryptFiles.
 *
 * @param { DecryptRequest } params - The params required to decrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<{ [key: string]: JSZip.JSZipObject }>} - The decrypted zip file
 */
export declare const decryptToZip: (params: DecryptRequest, litNodeClient: ILitNodeClient) => Promise<{
    [key: string]: JSZip.JSZipObject;
}>;
/**
 *
 * Encrypt a zip file created with JSZip.
 *
 * @param { EncryptZipRequest } params - The params required to encrypt a zip
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted zip file and the hash of the zip file
 */
export declare const encryptZip: (params: EncryptZipRequest, litNodeClient: ILitNodeClient) => Promise<EncryptResponse>;
/**
 *
 * Encrypt a single file and then zip it up with the metadata.
 *
 * @param { EncryptFileAndZipWithMetadataProps } params - The params required to encrypt a file and zip it up with the metadata
 *
 * @returns { Promise<any> } - The encrypted zip file and the hash of the zip file
 *
 */
export declare const encryptFileAndZipWithMetadata: (params: EncryptFileAndZipWithMetadataProps) => Promise<any>;
/**
 *
 * Given a zip file with metadata inside it, unzip, load the metadata, and return the decrypted file and the metadata.  This zip file would have been created with the encryptFileAndZipWithMetadata function.
 *
 * @param { DecryptZipFileWithMetadataProps } params - The params required to decrypt a zip file with metadata
 *
 * @returns { Promise<DecryptZipFileWithMetadata> } A promise containing an object that contains decryptedFile and metadata properties.  The decryptedFile is an ArrayBuffer that is ready to use, and metadata is an object that contains all the properties of the file like it's name and size and type.
 */
export declare const decryptZipFileWithMetadata: (params: DecryptZipFileWithMetadataProps) => Promise<DecryptZipFileWithMetadata | undefined>;
/**
 *
 * Encrypt a file without doing any zipping or packing.  This is useful for large files.  A 1gb file can be encrypted in only 2 seconds, for example.
 *
 * @param { EncryptFileRequest } params - The params required to encrypt a file
 * @param { ILitNodeClient } litNodeClient - The lit node client to use to encrypt the file
 *
 * @returns { Promise<EncryptResponse> } - The encrypted file and the hash of the file
 */
export declare const encryptFile: (params: EncryptFileRequest, litNodeClient: ILitNodeClient) => Promise<EncryptResponse>;
/**
 *
 * Decrypt a file that was encrypted with the encryptFile function, without doing any unzipping or unpacking.  This is useful for large files.  A 1gb file can be decrypted in only 1 second, for example.
 *
 * @param { DecryptRequest } params - The params required to decrypt a file
 * @param { ILitNodeClient } litNodeClient - The lit node client to use to decrypt the file
 *
 * @returns { Promise<Uint8Array> } - The decrypted file
 */
export declare const decryptToFile: (params: DecryptRequest, litNodeClient: ILitNodeClient) => Promise<Uint8Array>;
declare global {
    var wasmExports: any;
    var wasmECDSA: any;
    var LitNodeClient: any;
}
/**
 * // TODO check for expiration
 *
 * Verify a JWT from the LIT network.  Use this for auth on your server.  For some background, users can specify access control condiitons for various URLs, and then other users can then request a signed JWT proving that their ETH account meets those on-chain conditions using the getSignedToken function.  Then, servers can verify that JWT using this function.  A successful verification proves that the user meets the access control conditions defined earlier.  For example, the on-chain condition could be posession of a specific NFT.
 *
 * @param { VerifyJWTProps } jwt
 *
 * @returns { IJWT<T> } An object with 4 keys: "verified": A boolean that represents whether or not the token verifies successfully.  A true result indicates that the token was successfully verified.  "header": the JWT header.  "payload": the JWT payload which includes the resource being authorized, etc.  "signature": A uint8array that represents the raw  signature of the JWT.
 */
export declare const verifyJwt: ({ publicKey, jwt, }: VerifyJWTProps) => IJWT<SigningAccessControlConditionJWTPayload>;
