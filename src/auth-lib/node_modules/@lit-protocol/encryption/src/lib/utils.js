"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidBooleanExpression = exports.isTokenOperator = void 0;
function isTokenOperator(token) {
    const OPERATORS = ['and', 'or']; // Only permissible boolean operators on the nodes
    return token.hasOwnProperty('operator') && OPERATORS.includes(token.operator);
}
exports.isTokenOperator = isTokenOperator;
function isValidBooleanExpression(expression) {
    const STATES = {
        START: 'start',
        CONDITION: 'condition',
        OPERATOR: 'operator',
    };
    let currentState = STATES.START;
    for (const token of expression) {
        switch (currentState) {
            case STATES.START:
            case STATES.OPERATOR:
                if (isTokenOperator(token)) {
                    return false;
                }
                // Nested conditions expression
                if (Array.isArray(token) && !isValidBooleanExpression(token)) {
                    return false;
                }
                currentState = STATES.CONDITION;
                break;
            default:
                if (!isTokenOperator(token)) {
                    return false;
                }
                currentState = STATES.OPERATOR;
        }
    }
    return currentState === STATES.CONDITION;
}
exports.isValidBooleanExpression = isValidBooleanExpression;
//# sourceMappingURL=utils.js.map