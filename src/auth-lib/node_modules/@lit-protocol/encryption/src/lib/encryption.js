"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyJwt = exports.decryptToFile = exports.encryptFile = exports.decryptZipFileWithMetadata = exports.encryptFileAndZipWithMetadata = exports.encryptZip = exports.decryptToZip = exports.zipAndEncryptFiles = exports.zipAndEncryptString = exports.decryptToString = exports.encryptString = exports.decryptFromIpfs = exports.encryptToIpfs = void 0;
const constants_1 = require("@lit-protocol/constants");
const crypto_1 = require("@lit-protocol/crypto");
// @ts-ignore
const JSZip = require("jszip/dist/jszip.js");
const uint8arrays_1 = require("@lit-protocol/uint8arrays");
const misc_1 = require("@lit-protocol/misc");
const params_validators_1 = require("./params-validators");
const ipfsClient = require("ipfs-http-client");
/**
 *
 * Encrypt a string or file using the LIT network public key and upload all the metadata required to decrypt i.e. accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions & chain to IPFS using the ipfs-client-http SDK & returns the IPFS CID.
 *
 * @param { EncryptToIpfsProps } - The params required to encrypt & upload to IPFS
 *
 * @returns { Promise<string> } - IPFS CID
 *
 */
const encryptToIpfs = async (params) => {
    const { authSig, sessionSigs, accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions, chain, string, file, litNodeClient, infuraId, infuraSecretKey, } = params;
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'encryptToIpfs',
        params: {
            authSig,
            sessionSigs,
            accessControlConditions,
            evmContractConditions,
            solRpcConditions,
            unifiedAccessControlConditions,
            chain,
            string,
            file,
            litNodeClient,
        },
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    let ciphertext;
    let dataToEncryptHash;
    let dataType;
    if (string !== undefined) {
        const encryptResponse = await (0, exports.encryptString)({
            ...params,
            dataToEncrypt: string,
        }, litNodeClient);
        ciphertext = encryptResponse.ciphertext;
        dataToEncryptHash = encryptResponse.dataToEncryptHash;
        dataType = 'string';
    }
    else {
        const encryptResponse = await (0, exports.encryptFile)({ ...params, file: file }, litNodeClient);
        ciphertext = encryptResponse.ciphertext;
        dataToEncryptHash = encryptResponse.dataToEncryptHash;
        dataType = 'file';
    }
    const authorization = 'Basic ' + Buffer.from(`${infuraId}:${infuraSecretKey}`).toString('base64');
    const ipfs = ipfsClient.create({
        url: 'https://ipfs.infura.io:5001/api/v0',
        headers: {
            authorization,
        },
    });
    try {
        const res = await ipfs.add(JSON.stringify({
            ciphertext,
            dataToEncryptHash,
            accessControlConditions,
            evmContractConditions,
            solRpcConditions,
            unifiedAccessControlConditions,
            chain,
            dataType,
        }));
        return res.path;
    }
    catch (e) {
        return (0, misc_1.throwError)({
            message: 'Unable to upload to IPFS',
            errorKind: constants_1.LIT_ERROR.INVALID_ARGUMENT_EXCEPTION.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_ARGUMENT_EXCEPTION.name,
        });
    }
};
exports.encryptToIpfs = encryptToIpfs;
/**
 *
 * Decrypt & return the string or file (in Uint8Array format) using its metadata stored on IPFS with the given ipfsCid.
 *
 * @param { DecryptFromIpfsProps } - The params required to decrypt from IPFS
 *
 * @returns { Promise<string | Uint8Array> } - The decrypted string or file (in Uint8Array format)
 *
 */
const decryptFromIpfs = async (params) => {
    const { authSig, sessionSigs, ipfsCid, litNodeClient } = params;
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decryptFromIpfs',
        params: {
            authSig,
            sessionSigs,
            ipfsCid,
            litNodeClient,
        },
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    try {
        const metadata = await (await fetch(`https://gateway.pinata.cloud/ipfs/${ipfsCid}`)).json();
        if (metadata.dataType === 'string') {
            return (0, exports.decryptToString)({
                accessControlConditions: metadata.accessControlConditions,
                evmContractConditions: metadata.evmContractConditions,
                solRpcConditions: metadata.solRpcConditions,
                unifiedAccessControlConditions: metadata.unifiedAccessControlConditions,
                ciphertext: metadata.ciphertext,
                dataToEncryptHash: metadata.dataToEncryptHash,
                chain: metadata.chain,
                authSig,
                sessionSigs,
            }, litNodeClient);
        }
        else {
            return (0, exports.decryptToFile)({
                accessControlConditions: metadata.accessControlConditions,
                evmContractConditions: metadata.evmContractConditions,
                solRpcConditions: metadata.solRpcConditions,
                unifiedAccessControlConditions: metadata.unifiedAccessControlConditions,
                ciphertext: metadata.ciphertext,
                dataToEncryptHash: metadata.dataToEncryptHash,
                chain: metadata.chain,
                authSig,
                sessionSigs,
            }, litNodeClient);
        }
    }
    catch (e) {
        return (0, misc_1.throwError)({
            message: 'Unable to fetch or decrypt from IPFS',
            errorKind: constants_1.LIT_ERROR.INVALID_ARGUMENT_EXCEPTION.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_ARGUMENT_EXCEPTION.name,
        });
    }
};
exports.decryptFromIpfs = decryptFromIpfs;
// ---------- Local Helpers ----------
/**
 *
 * Encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { EncryptStringRequest } params - The params required to encrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted string and the hash of the string
 */
const encryptString = async (params, litNodeClient) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'encryptString',
        params,
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    return litNodeClient.encrypt({
        ...params,
        dataToEncrypt: (0, uint8arrays_1.uint8arrayFromString)(params.dataToEncrypt, 'utf8'),
    });
};
exports.encryptString = encryptString;
/**
 *
 * Decrypt ciphertext into a string that was encrypted with the encryptString function.
 *
 * @param { DecryptRequest } params - The params required to decrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client

 * @returns { Promise<string> } - The decrypted string
 */
const decryptToString = async (params, litNodeClient) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decrypt',
        params,
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    const { decryptedData } = await litNodeClient.decrypt(params);
    return (0, uint8arrays_1.uint8arrayToString)(decryptedData, 'utf8');
};
exports.decryptToString = decryptToString;
/**
 *
 * Zip and encrypt a string.  This is used to encrypt any string that is to be locked via the Lit Protocol.
 *
 * @param { EncryptStringRequest } params - The params required to encrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted string and the hash of the string
 */
const zipAndEncryptString = async (params, litNodeClient) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'zipAndEncryptString',
        params,
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    zip.file('string.txt', params.dataToEncrypt);
    return (0, exports.encryptZip)({ ...params, zip }, litNodeClient);
};
exports.zipAndEncryptString = zipAndEncryptString;
/**
 *
 * Zip and encrypt multiple files.
 *
 * @param { Array<File> } files - The files to encrypt
 * @param { EncryptRequestBase } paramsBase - The params required to encrypt a file
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted file and the hash of the file
 
*/
const zipAndEncryptFiles = async (files, paramsBase, litNodeClient) => {
    // let's zip em
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    // -- zip each file
    for (let i = 0; i < files.length; i++) {
        // -- validate
        if (!(0, misc_1.checkType)({
            value: files[i],
            allowedTypes: ['File'],
            paramName: `files[${i}]`,
            functionName: 'zipAndEncryptFiles',
        }))
            (0, misc_1.throwError)({
                message: 'Invalid file type',
                errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
                errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
            });
        const folder = zip.folder('encryptedAssets');
        if (!folder) {
            (0, misc_1.log)("Failed to get 'encryptedAssets' from zip.folder() ");
            return (0, misc_1.throwError)({
                message: "Failed to get 'encryptedAssets' from zip.folder() ",
                errorKind: constants_1.LIT_ERROR.UNKNOWN_ERROR.kind,
                errorCode: constants_1.LIT_ERROR.UNKNOWN_ERROR.name,
            });
        }
        folder.file(files[i].name, files[i]);
    }
    return (0, exports.encryptZip)({ ...paramsBase, zip }, litNodeClient);
};
exports.zipAndEncryptFiles = zipAndEncryptFiles;
/**
 *
 * Decrypt and unzip a zip that was created using encryptZip, zipAndEncryptString, or zipAndEncryptFiles.
 *
 * @param { DecryptRequest } params - The params required to decrypt a string
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<{ [key: string]: JSZip.JSZipObject }>} - The decrypted zip file
 */
const decryptToZip = async (params, litNodeClient) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decrypt',
        params,
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    const { decryptedData } = await litNodeClient.decrypt(params);
    // unpack the zip
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    const unzipped = await zip.loadAsync(decryptedData);
    return unzipped.files;
};
exports.decryptToZip = decryptToZip;
/**
 *
 * Encrypt a zip file created with JSZip.
 *
 * @param { EncryptZipRequest } params - The params required to encrypt a zip
 * @param { ILitNodeClient } litNodeClient - The Lit Node Client
 *
 * @returns { Promise<EncryptResponse> } - The encrypted zip file and the hash of the zip file
 */
const encryptZip = async (params, litNodeClient) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'encryptZip',
        params,
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    const { zip } = params;
    let zipBlob;
    let zipBlobArrayBuffer;
    if ((0, misc_1.isBrowser)()) {
        zipBlob = await zip.generateAsync({ type: 'blob' });
        zipBlobArrayBuffer = await zipBlob.arrayBuffer();
    }
    else {
        zipBlobArrayBuffer = await zip.generateAsync({ type: 'nodebuffer' });
    }
    // to download the encrypted zip file for testing, uncomment this
    // saveAs(encryptedZipBlob, 'encrypted.bin')
    return litNodeClient.encrypt({
        ...params,
        dataToEncrypt: new Uint8Array(zipBlobArrayBuffer),
    });
};
exports.encryptZip = encryptZip;
/**
 *
 * Encrypt a single file and then zip it up with the metadata.
 *
 * @param { EncryptFileAndZipWithMetadataProps } params - The params required to encrypt a file and zip it up with the metadata
 *
 * @returns { Promise<any> } - The encrypted zip file and the hash of the zip file
 *
 */
const encryptFileAndZipWithMetadata = async (params) => {
    const { authSig, sessionSigs, accessControlConditions, evmContractConditions, solRpcConditions, unifiedAccessControlConditions, chain, file, litNodeClient, readme, } = params;
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'encryptFileAndZipWithMetadata',
        params: {
            authSig,
            sessionSigs,
            accessControlConditions,
            evmContractConditions,
            solRpcConditions,
            unifiedAccessControlConditions,
            chain,
            file,
            litNodeClient,
            readme,
        },
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    // encrypt the file
    const { ciphertext, dataToEncryptHash } = await (0, exports.encryptFile)({ ...params }, litNodeClient);
    // Zip up with metadata
    let zip;
    try {
        zip = new JSZip.default();
    }
    catch (e) {
        zip = new JSZip();
    }
    const metadata = {
        name: file.name,
        type: file.type,
        size: file.size,
        accessControlConditions,
        evmContractConditions,
        solRpcConditions,
        unifiedAccessControlConditions,
        chain,
        dataToEncryptHash,
    };
    zip.file('lit_protocol_metadata.json', JSON.stringify(metadata));
    if (readme) {
        zip.file('readme.txt', readme);
    }
    const folder = zip.folder('encryptedAssets');
    if (!folder) {
        (0, misc_1.log)("Failed to get 'encryptedAssets' from zip.folder() ");
        return (0, misc_1.throwError)({
            message: `Failed to get 'encryptedAssets' from zip.folder()`,
            errorKind: constants_1.LIT_ERROR.UNKNOWN_ERROR.kind,
            errorCode: constants_1.LIT_ERROR.UNKNOWN_ERROR.name,
        });
    }
    folder.file(file.name, (0, uint8arrays_1.uint8arrayFromString)(ciphertext, 'base64'));
    let zipBlob;
    if ((0, misc_1.isBrowser)()) {
        zipBlob = await zip.generateAsync({ type: 'blob' });
    }
    else {
        zipBlob = await zip.generateAsync({ type: 'nodebuffer' });
    }
    return zipBlob;
};
exports.encryptFileAndZipWithMetadata = encryptFileAndZipWithMetadata;
/**
 *
 * Given a zip file with metadata inside it, unzip, load the metadata, and return the decrypted file and the metadata.  This zip file would have been created with the encryptFileAndZipWithMetadata function.
 *
 * @param { DecryptZipFileWithMetadataProps } params - The params required to decrypt a zip file with metadata
 *
 * @returns { Promise<DecryptZipFileWithMetadata> } A promise containing an object that contains decryptedFile and metadata properties.  The decryptedFile is an ArrayBuffer that is ready to use, and metadata is an object that contains all the properties of the file like it's name and size and type.
 */
const decryptZipFileWithMetadata = async (params) => {
    const { authSig, sessionSigs, file, litNodeClient } = params;
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decryptZipFileWithMetadata',
        params: {
            authSig,
            sessionSigs,
            file,
            litNodeClient,
        },
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    // -- execute
    const zip = await JSZip.loadAsync(file);
    const jsonFile = zip.file('lit_protocol_metadata.json');
    if (!jsonFile) {
        (0, misc_1.log)(`Failed to read lit_protocol_metadata.json while zip.file()`);
        return;
    }
    const metadata = JSON.parse(await jsonFile.async('string'));
    (0, misc_1.log)('zip metadata', metadata);
    const folder = zip.folder('encryptedAssets');
    if (!folder) {
        (0, misc_1.log)("Failed to get 'encryptedAssets' from zip.folder() ");
        return;
    }
    const _file = folder.file(metadata.name);
    if (!_file) {
        (0, misc_1.log)("Failed to get 'metadata.name' while zip.folder().file()");
        return;
    }
    const encryptedFile = await _file.async('blob');
    const decryptedFile = await (0, exports.decryptToFile)({
        ...params,
        accessControlConditions: metadata.accessControlConditions,
        evmContractConditions: metadata.evmContractConditions,
        solRpcConditions: metadata.solRpcConditions,
        unifiedAccessControlConditions: metadata.unifiedAccessControlConditions,
        chain: metadata.chain,
        ciphertext: (0, uint8arrays_1.uint8arrayToString)(new Uint8Array(await encryptedFile.arrayBuffer()), 'base64'),
        dataToEncryptHash: metadata.dataToEncryptHash,
    }, litNodeClient);
    const data = { decryptedFile, metadata };
    return data;
};
exports.decryptZipFileWithMetadata = decryptZipFileWithMetadata;
/**
 *
 * Encrypt a file without doing any zipping or packing.  This is useful for large files.  A 1gb file can be encrypted in only 2 seconds, for example.
 *
 * @param { EncryptFileRequest } params - The params required to encrypt a file
 * @param { ILitNodeClient } litNodeClient - The lit node client to use to encrypt the file
 *
 * @returns { Promise<EncryptResponse> } - The encrypted file and the hash of the file
 */
const encryptFile = async (params, litNodeClient) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'encryptFile',
        params,
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    // encrypt the file
    var fileAsArrayBuffer = await params.file.arrayBuffer();
    return litNodeClient.encrypt({
        ...params,
        dataToEncrypt: new Uint8Array(fileAsArrayBuffer),
    });
};
exports.encryptFile = encryptFile;
/**
 *
 * Decrypt a file that was encrypted with the encryptFile function, without doing any unzipping or unpacking.  This is useful for large files.  A 1gb file can be decrypted in only 1 second, for example.
 *
 * @param { DecryptRequest } params - The params required to decrypt a file
 * @param { ILitNodeClient } litNodeClient - The lit node client to use to decrypt the file
 *
 * @returns { Promise<Uint8Array> } - The decrypted file
 */
const decryptToFile = async (params, litNodeClient) => {
    // -- validate
    const paramsIsSafe = (0, params_validators_1.safeParams)({
        functionName: 'decrypt',
        params,
    });
    if (paramsIsSafe.type === "ERROR" /* EITHER_TYPE.ERROR */)
        return (0, misc_1.throwError)({
            message: `Invalid params: ${paramsIsSafe.result.message}`,
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    const { decryptedData } = await litNodeClient.decrypt(params);
    return decryptedData;
};
exports.decryptToFile = decryptToFile;
/**
 * // TODO check for expiration
 *
 * Verify a JWT from the LIT network.  Use this for auth on your server.  For some background, users can specify access control condiitons for various URLs, and then other users can then request a signed JWT proving that their ETH account meets those on-chain conditions using the getSignedToken function.  Then, servers can verify that JWT using this function.  A successful verification proves that the user meets the access control conditions defined earlier.  For example, the on-chain condition could be posession of a specific NFT.
 *
 * @param { VerifyJWTProps } jwt
 *
 * @returns { IJWT<T> } An object with 4 keys: "verified": A boolean that represents whether or not the token verifies successfully.  A true result indicates that the token was successfully verified.  "header": the JWT header.  "payload": the JWT payload which includes the resource being authorized, etc.  "signature": A uint8array that represents the raw  signature of the JWT.
 */
const verifyJwt = ({ publicKey, jwt, }) => {
    // -- validate
    if (!(0, misc_1.checkType)({
        value: jwt,
        allowedTypes: ['String'],
        paramName: 'jwt',
        functionName: 'verifyJwt',
    }))
        return (0, misc_1.throwError)({
            message: 'jwt must be a string',
            errorKind: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.kind,
            errorCode: constants_1.LIT_ERROR.INVALID_PARAM_TYPE.name,
        });
    (0, misc_1.log)('verifyJwt', jwt);
    // verify that the wasm was loaded
    if (!globalThis.wasmExports) {
        (0, misc_1.log)('wasmExports is not loaded.');
    }
    const jwtParts = jwt.split('.');
    const signature = (0, uint8arrays_1.uint8arrayFromString)(jwtParts[2], 'base64url');
    const unsignedJwt = `${jwtParts[0]}.${jwtParts[1]}`;
    const message = (0, uint8arrays_1.uint8arrayFromString)(unsignedJwt);
    (0, crypto_1.verifySignature)(publicKey, message, signature);
    const _jwt = {
        verified: true,
        header: JSON.parse((0, uint8arrays_1.uint8arrayToString)((0, uint8arrays_1.uint8arrayFromString)(jwtParts[0], 'base64url'))),
        payload: JSON.parse((0, uint8arrays_1.uint8arrayToString)((0, uint8arrays_1.uint8arrayFromString)(jwtParts[1], 'base64url'))),
        signature,
    };
    return _jwt;
};
exports.verifyJwt = verifyJwt;
//# sourceMappingURL=encryption.js.map