import { Signer } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { PKPHelper, PKPHelperInterface } from '../PKPHelper';
export declare class PKPHelper__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_resolver";
            readonly type: "address";
        }, {
            readonly internalType: "enum ContractResolver.Env";
            readonly name: "_env";
            readonly type: "uint8";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newResolverAddress";
            readonly type: "address";
        }];
        readonly name: "ContractResolverAddressSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "keyType";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "derivedKeyId";
                readonly type: "bytes32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "r";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "s";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "v";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct IPubkeyRouter.Signature[]";
                readonly name: "signatures";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct LibPKPNFTStorage.ClaimMaterial";
            readonly name: "claimMaterial";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "keyType";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "permittedIpfsCIDs";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "uint256[][]";
                readonly name: "permittedIpfsCIDScopes";
                readonly type: "uint256[][]";
            }, {
                readonly internalType: "address[]";
                readonly name: "permittedAddresses";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint256[][]";
                readonly name: "permittedAddressScopes";
                readonly type: "uint256[][]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "permittedAuthMethodTypes";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "permittedAuthMethodIds";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "permittedAuthMethodPubkeys";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "uint256[][]";
                readonly name: "permittedAuthMethodScopes";
                readonly type: "uint256[][]";
            }, {
                readonly internalType: "bool";
                readonly name: "addPkpEthAddressAsPermittedAddress";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "sendPkpToItself";
                readonly type: "bool";
            }];
            readonly internalType: "struct PKPHelper.AuthMethodData";
            readonly name: "authMethodData";
            readonly type: "tuple";
        }];
        readonly name: "claimAndMintNextAndAddAuthMethods";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "keyType";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "derivedKeyId";
                readonly type: "bytes32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "r";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "s";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "v";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct IPubkeyRouter.Signature[]";
                readonly name: "signatures";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct LibPKPNFTStorage.ClaimMaterial";
            readonly name: "claimMaterial";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "keyType";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "permittedIpfsCIDs";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "uint256[][]";
                readonly name: "permittedIpfsCIDScopes";
                readonly type: "uint256[][]";
            }, {
                readonly internalType: "address[]";
                readonly name: "permittedAddresses";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint256[][]";
                readonly name: "permittedAddressScopes";
                readonly type: "uint256[][]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "permittedAuthMethodTypes";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "permittedAuthMethodIds";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "permittedAuthMethodPubkeys";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "uint256[][]";
                readonly name: "permittedAuthMethodScopes";
                readonly type: "uint256[][]";
            }, {
                readonly internalType: "bool";
                readonly name: "addPkpEthAddressAsPermittedAddress";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "sendPkpToItself";
                readonly type: "bool";
            }];
            readonly internalType: "struct PKPHelper.AuthMethodData";
            readonly name: "authMethodData";
            readonly type: "tuple";
        }];
        readonly name: "claimAndMintNextAndAddAuthMethodsWithTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "contractResolver";
        readonly outputs: readonly [{
            readonly internalType: "contract ContractResolver";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "env";
        readonly outputs: readonly [{
            readonly internalType: "enum ContractResolver.Env";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDomainWalletRegistry";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPKPNftMetdataAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPkpNftAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPkpPermissionsAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "keyType";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "permittedAuthMethodTypes";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permittedAuthMethodIds";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permittedAuthMethodPubkeys";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[][]";
            readonly name: "permittedAuthMethodScopes";
            readonly type: "uint256[][]";
        }, {
            readonly internalType: "bool";
            readonly name: "addPkpEthAddressAsPermittedAddress";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "sendPkpToItself";
            readonly type: "bool";
        }];
        readonly name: "mintNextAndAddAuthMethods";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "keyType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permittedIpfsCIDs";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[][]";
            readonly name: "permittedIpfsCIDScopes";
            readonly type: "uint256[][]";
        }, {
            readonly internalType: "address[]";
            readonly name: "permittedAddresses";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[][]";
            readonly name: "permittedAddressScopes";
            readonly type: "uint256[][]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "permittedAuthMethodTypes";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permittedAuthMethodIds";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permittedAuthMethodPubkeys";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[][]";
            readonly name: "permittedAuthMethodScopes";
            readonly type: "uint256[][]";
        }, {
            readonly internalType: "bool";
            readonly name: "addPkpEthAddressAsPermittedAddress";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "sendPkpToItself";
            readonly type: "bool";
        }];
        readonly name: "mintNextAndAddAuthMethodsWithTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "keyType";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "permittedAuthMethodTypes";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permittedAuthMethodIds";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "permittedAuthMethodPubkeys";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "uint256[][]";
            readonly name: "permittedAuthMethodScopes";
            readonly type: "uint256[][]";
        }, {
            readonly internalType: "string[]";
            readonly name: "nftMetadata";
            readonly type: "string[]";
        }, {
            readonly internalType: "bool";
            readonly name: "addPkpEthAddressAsPermittedAddress";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "sendPkpToItself";
            readonly type: "bool";
        }];
        readonly name: "mintNextAndAddDomainWalletMetadata";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "removePkpMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newResolverAddress";
            readonly type: "address";
        }];
        readonly name: "setContractResolver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string[]";
            readonly name: "nftMetadata";
            readonly type: "string[]";
        }];
        readonly name: "setPkpMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): PKPHelperInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PKPHelper;
}
