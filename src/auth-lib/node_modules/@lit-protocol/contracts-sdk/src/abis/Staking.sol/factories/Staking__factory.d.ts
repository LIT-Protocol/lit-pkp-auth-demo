import { Signer } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { Staking, StakingInterface } from '../Staking';
export declare class Staking__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "CannotAddFunctionToDiamondThatAlreadyExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4[]";
            readonly name: "_selectors";
            readonly type: "bytes4[]";
        }];
        readonly name: "CannotAddSelectorsToZeroAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "CannotRemoveFunctionThatDoesNotExist";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "CannotRemoveImmutableFunction";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "CannotReplaceFunctionThatDoesNotExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4[]";
            readonly name: "_selectors";
            readonly type: "bytes4[]";
        }];
        readonly name: "CannotReplaceFunctionsFromFacetWithZeroAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "CannotReplaceImmutableFunction";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_action";
            readonly type: "uint8";
        }];
        readonly name: "IncorrectFacetCutAction";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_initializationContractAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "InitializationFunctionReverted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_contractAddress";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "_message";
            readonly type: "string";
        }];
        readonly name: "NoBytecodeAtAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_facetAddress";
            readonly type: "address";
        }];
        readonly name: "NoSelectorsProvidedForFacetForCut";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_contractOwner";
            readonly type: "address";
        }];
        readonly name: "NotContractOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_facetAddress";
            readonly type: "address";
        }];
        readonly name: "RemoveFacetAddressMustBeZeroAddress";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamond.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDiamond.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "DiamondCut";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamond.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IDiamond.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "diamondCut";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_functionSelector";
            readonly type: "bytes4";
        }];
        readonly name: "facetAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress_";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "facetAddresses";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "facetAddresses_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_facet";
            readonly type: "address";
        }];
        readonly name: "facetFunctionSelectors";
        readonly outputs: readonly [{
            readonly internalType: "bytes4[]";
            readonly name: "_facetFunctionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "facets";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IDiamondLoupe.Facet[]";
            readonly name: "facets_";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner_";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ActiveValidatorsCannotLeave";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CallerNotOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "stakingAddress";
            readonly type: "address";
        }];
        readonly name: "CannotRejoinUntilNextEpochBecauseKicked";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "senderPubKey";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "receiverPubKey";
            readonly type: "uint256";
        }];
        readonly name: "CannotReuseCommsKeys";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CannotStakeZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "stakerAddress";
            readonly type: "address";
        }];
        readonly name: "CannotVoteTwice";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CannotWithdrawZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "nodeAddress";
            readonly type: "address";
        }];
        readonly name: "CouldNotMapNodeAddressToStakerAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "state";
            readonly type: "uint8";
        }];
        readonly name: "MustBeInActiveOrUnlockedOrPausedState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "state";
            readonly type: "uint8";
        }];
        readonly name: "MustBeInActiveOrUnlockedState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "state";
            readonly type: "uint8";
        }];
        readonly name: "MustBeInNextValidatorSetLockedOrReadyForNextEpochOrRestoreState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "state";
            readonly type: "uint8";
        }];
        readonly name: "MustBeInNextValidatorSetLockedState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "state";
            readonly type: "uint8";
        }];
        readonly name: "MustBeInReadyForNextEpochState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "stakerAddress";
            readonly type: "address";
        }];
        readonly name: "MustBeValidatorInNextEpochToKick";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "currentTimestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "epochEndTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughTimeElapsedForTimeoutSinceLastEpoch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "currentTimestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "epochEndTime";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughTimeElapsedSinceLastEpoch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "validatorCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minimumValidatorCount";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughValidatorsInNextEpoch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "currentReadyValidatorCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "nextReadyValidatorCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minimumValidatorCountToBeReady";
            readonly type: "uint256";
        }];
        readonly name: "NotEnoughValidatorsReadyForNextEpoch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "currentEpochNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "receivedEpochNumber";
            readonly type: "uint256";
        }];
        readonly name: "SignaledReadyForWrongEpochNumber";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "stakerAddress";
            readonly type: "address";
        }];
        readonly name: "StakerNotPermitted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "yourBalance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requestedWithdrawlAmount";
            readonly type: "uint256";
        }];
        readonly name: "TryingToWithdrawMoreThanStaked";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "validator";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "validatorsInNextEpoch";
            readonly type: "address[]";
        }];
        readonly name: "ValidatorIsNotInNextEpoch";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newTokenRewardPerTokenPerEpoch";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newComplaintTolerance";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newComplaintIntervalSecs";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "newKeyTypes";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newMinimumValidatorCount";
            readonly type: "uint256";
        }];
        readonly name: "ConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newEpochEndTime";
            readonly type: "uint256";
        }];
        readonly name: "EpochEndTimeSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newEpochLength";
            readonly type: "uint256";
        }];
        readonly name: "EpochLengthSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newEpochTimeout";
            readonly type: "uint256";
        }];
        readonly name: "EpochTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "reason";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newKickPenaltyPercent";
            readonly type: "uint256";
        }];
        readonly name: "KickPenaltyPercentSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "epochNumber";
            readonly type: "uint256";
        }];
        readonly name: "ReadyForNextEpoch";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Recovered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }];
        readonly name: "RequestToJoin";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }];
        readonly name: "RequestToLeave";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newResolverContractAddress";
            readonly type: "address";
        }];
        readonly name: "ResolverContractAddressSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newDuration";
            readonly type: "uint256";
        }];
        readonly name: "RewardsDurationUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newStakingTokenAddress";
            readonly type: "address";
        }];
        readonly name: "StakingTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "newState";
            readonly type: "uint8";
        }];
        readonly name: "StateChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountBurned";
            readonly type: "uint256";
        }];
        readonly name: "ValidatorKickedFromNextEpoch";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }];
        readonly name: "ValidatorRejoinedNextEpoch";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "reporter";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "validatorStakerAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "reason";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "VotedToKickValidatorInNextEpoch";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "validatorStakerAddress";
            readonly type: "address";
        }];
        readonly name: "adminKickValidatorInNextEpoch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }];
        readonly name: "adminRejoinValidator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "validatorStakerAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountToPenalize";
            readonly type: "uint256";
        }];
        readonly name: "adminSlashValidator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "advanceEpoch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "exit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "validatorStakerAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "reason";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "kickValidatorInNextEpoch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lockValidatorsForNextEpoch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "ip";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint128";
            readonly name: "ipv6";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint32";
            readonly name: "port";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "nodeAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "senderPubKey";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "receiverPubKey";
            readonly type: "uint256";
        }];
        readonly name: "requestToJoin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "requestToLeave";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newTokenRewardPerTokenPerEpoch";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "newComplaintTolerance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "newComplaintIntervalSecs";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "newKeyTypes";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "newMinimumValidatorCount";
            readonly type: "uint256";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newResolverAddress";
            readonly type: "address";
        }];
        readonly name: "setContractResolver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newEpochEndTime";
            readonly type: "uint256";
        }];
        readonly name: "setEpochEndTime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newEpochLength";
            readonly type: "uint256";
        }];
        readonly name: "setEpochLength";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "newState";
            readonly type: "uint8";
        }];
        readonly name: "setEpochState";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "newEpochTimeout";
            readonly type: "uint256";
        }];
        readonly name: "setEpochTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "ip";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint128";
            readonly name: "ipv6";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint32";
            readonly name: "port";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "nodeAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "senderPubKey";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "receiverPubKey";
            readonly type: "uint256";
        }];
        readonly name: "setIpPortNodeAddressAndCommunicationPubKeys";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "reason";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "newKickPenaltyPercent";
            readonly type: "uint256";
        }];
        readonly name: "setKickPenaltyPercent";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "epochNumber";
            readonly type: "uint256";
        }];
        readonly name: "signalReadyForNextEpoch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "stake";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "ip";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint128";
            readonly name: "ipv6";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint32";
            readonly name: "port";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "nodeAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "senderPubKey";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "receiverPubKey";
            readonly type: "uint256";
        }];
        readonly name: "stakeAndJoin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unlockValidatorsForNextEpoch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "major";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minor";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "patch";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Version";
            readonly name: "version";
            readonly type: "tuple";
        }];
        readonly name: "checkVersion";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMaxVersion";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "major";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minor";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "patch";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Version";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMaxVersionString";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMinVersion";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "major";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minor";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "patch";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Version";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMinVersionString";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "major";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minor";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "patch";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Version";
            readonly name: "version";
            readonly type: "tuple";
        }];
        readonly name: "setMaxVersion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "major";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minor";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "patch";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Version";
            readonly name: "version";
            readonly type: "tuple";
        }];
        readonly name: "setMinVersion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "config";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "tokenRewardPerTokenPerEpoch";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "complaintTolerance";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "complaintIntervalSecs";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "keyTypes";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "minimumValidatorCount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Config";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "contractResolver";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "countOfCurrentValidatorsReadyForNextEpoch";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "countOfNextValidatorsReadyForNextEpoch";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentValidatorCountForConsensus";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "epoch";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "epochLength";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "number";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "endTime";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "retries";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "timeout";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Epoch";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getKeyTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getKickedValidators";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "addresses";
            readonly type: "address[]";
        }];
        readonly name: "getNodeStakerAddressMappings";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "nodeAddress";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "stakerAddress";
                readonly type: "address";
            }];
            readonly internalType: "struct LibStakingStorage.AddressMapping[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getStakingBalancesAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTokenAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getValidatorsInCurrentEpoch";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getValidatorsInCurrentEpochLength";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getValidatorsInNextEpoch";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "addresses";
            readonly type: "address[]";
        }];
        readonly name: "getValidatorsStructs";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "ip";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "ipv6";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint32";
                readonly name: "port";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "nodeAddress";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "reward";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "senderPubKey";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "receiverPubKey";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Validator[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getValidatorsStructsInCurrentEpoch";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "ip";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "ipv6";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint32";
                readonly name: "port";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "nodeAddress";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "reward";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "senderPubKey";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "receiverPubKey";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Validator[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getValidatorsStructsInNextEpoch";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "ip";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "ipv6";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint32";
                readonly name: "port";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "nodeAddress";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "reward";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "senderPubKey";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "receiverPubKey";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Validator[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "epochNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "validatorStakerAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "voterStakerAddress";
            readonly type: "address";
        }];
        readonly name: "getVotingStatusToKickValidator";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "isActiveValidator";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "isActiveValidatorByNodeAddress";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isReadyForNextEpoch";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "reason";
            readonly type: "uint256";
        }];
        readonly name: "kickPenaltyPercentByReason";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nextValidatorCountForConsensus";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "nodeAddress";
            readonly type: "address";
        }];
        readonly name: "nodeAddressToStakerAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "stakerAddress";
            readonly type: "address";
        }];
        readonly name: "readyForNextEpoch";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "stakerAddress";
            readonly type: "address";
        }];
        readonly name: "shouldKickValidator";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "state";
        readonly outputs: readonly [{
            readonly internalType: "enum LibStakingStorage.States";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "stakerAddress";
            readonly type: "address";
        }];
        readonly name: "validators";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "ip";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint128";
                readonly name: "ipv6";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint32";
                readonly name: "port";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "nodeAddress";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "reward";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "senderPubKey";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "receiverPubKey";
                readonly type: "uint256";
            }];
            readonly internalType: "struct LibStakingStorage.Validator";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): StakingInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Staking;
}
