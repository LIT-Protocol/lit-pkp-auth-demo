"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LitNodeClient = void 0;
const lit_node_client_nodejs_1 = require("@lit-protocol/lit-node-client-nodejs");
const auth_browser_1 = require("@lit-protocol/auth-browser");
const misc_1 = require("@lit-protocol/misc");
const misc_browser_1 = require("@lit-protocol/misc-browser");
class LitNodeClient extends lit_node_client_nodejs_1.LitNodeClientNodeJs {
    constructor(args) {
        super({
            ...args,
            defaultAuthCallback: auth_browser_1.checkAndSignAuthMessage,
        });
        /**
         *
         * (Browser Only) Get the config from browser local storage and override default config
         *
         * @returns { void }
         *
         */
        this.overrideConfigsFromLocalStorage = () => {
            if ((0, misc_1.isNode)())
                return;
            const storageKey = 'LitNodeClientConfig';
            const storageConfigOrError = (0, misc_browser_1.getStorageItem)(storageKey);
            // -- validate
            if (storageConfigOrError.type === "ERROR" /* EITHER_TYPE.ERROR */) {
                (0, misc_1.log)(`Storage key "${storageKey}" is missing. `);
                return;
            }
            // -- execute
            const storageConfig = JSON.parse(storageConfigOrError.result);
            // this.config = override(this.config, storageConfig);
            this.config = { ...this.config, ...storageConfig };
        };
        // -- override configs
        this.overrideConfigsFromLocalStorage();
    }
}
exports.LitNodeClient = LitNodeClient;
//# sourceMappingURL=lit-node-client.js.map